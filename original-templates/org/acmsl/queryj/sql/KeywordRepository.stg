//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2005  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile: $
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate keyword repositories.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group KeywordRepository;

source(input) ::= <<
<!
  Generates a KeywordRepository source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
    [
      first_line_description(repository=input.tr_name),
      second_line_description(repository=input.tr_name)
    ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.functionsRepositorySubpackageName
  ])>

/*
 * Importing some QueryJ classes.
 */
import org.acmsl.queryj.BigDecimalField;
import org.acmsl.queryj.CalendarField;
import org.acmsl.queryj.ClobField;
import org.acmsl.queryj.DateField;
import org.acmsl.queryj.DoubleField;
import org.acmsl.queryj.Field;
import org.acmsl.queryj.IntField;
import org.acmsl.queryj.QueryJException;
import org.acmsl.queryj.LongField;
import org.acmsl.queryj.StringField;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;

<class(input=input)>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository name.
!>
Contains all defined field creation keywords for
>>

second_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository name.
!>
<repository> repository.
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
/**
 * <[
      first_line_description(repository=input.tr_name),
      second_line_description(repository=input.tr_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.tr_name_capitalized>KeywordRepository
{
    /**
     * Singleton implemented to avoid the double-checked locking.
     */
    private static class <input.tr_name_capitalized>KeywordRepositorySingletonContainer
    {
        /**
         * The actual singleton.
         */
        public static final <input.tr_name_capitalized>KeywordRepository SINGLETON = new <input.tr_name_capitalized>KeywordRepository();
    }

    /**
     * Public constructor to allow reflective access.
     */
    public <input.tr_name_capitalized>KeywordRepository() {};

    /**
     * Retrieves a \<code\><input.tr_name_capitalized>KeywordRepository\</code\> instance.
     * @return such instance.
     */
    public static <input.tr_name_capitalized>KeywordRepository getInstance()
    {
        return <input.tr_name_capitalized>KeywordRepositorySingletonContainer.SINGLETON;
    }

    <input.keywords,input.keyword_types,input.keywords_uncapitalized:
      {keyword, type, keywordUncapitalized | <keyword(keyword=keyword, type=type, keywordUncapitalized=keywordUncapitalized)>};
      separator="\n\n">
}
>>

keyword(keyword, type, keywordUncapitalized) ::= <<
<!
 Writes the keyword retrieval method.
 @param keyword the keyword.
 @param type the keyword type.
 @param keywordUncapitalized the uncapitalized keyword.
!>
/**
 * Represents database-interpreted <keyword> keyword
 * @return the associated keyword field.
 */
public <type>Field <keywordUncapitalized>()
{
    return new <type>Field("<keyword>", null);
}
>>
