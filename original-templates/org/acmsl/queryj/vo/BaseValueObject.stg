//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2006  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile: $
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate value object
//              implementations.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group BaseValueObject;

source(input) ::= <<
<!
  Generates a value object.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(tableName=input.table_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.voSubpackageName
  ])>

<if(input.implement_markers)>
/*
 * Importing some ACM-SL Commons classes.
 */
import org.acmsl.commons.patterns.dao.ValueObject;
<endif>

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

<class(input=input)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
!>
Abstract value-object implementation for \<i\><tableName>\</i\>.
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
/**
 * <[
      first_line_description(tableName=input.table_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public abstract class Abstract<input.vo_name>ValueObject
<if(input.implement_markers)>
    implements  <input.vo_name>,
                ValueObject
<else>
    implements  <input.vo_name>
<endif>

{
    <input.attributes:attribute_declaration(attribute=it);
     separator="\n\n">

    /**
     * Creates a \<code\>Abstract<input.vo_name>ValueObject\</code> instance.
     <input.attributes:attribute_javadoc(attribute=it); separator="\n">
     */
    public Abstract<input.vo_name>ValueObject(
        <input.attributes:attribute_method_declaration(attribute=it);
          separator=",\n">)
    {
        <input.attributes:immutable_setter_call(attribute=it);
          separator="\n">
    }

    <input.attributes:attribute_accessors(attribute=it);
     separator="\n\n">
}
>>

attribute_declaration(attribute) ::= <<
<!
 Writes the declaration for given attribute.
 @param attribute the attribute.
!>
/**
 * The \<i\><attribute.name>\</i\> value.
 */
<if(attribute.allowsNull)>
private <attribute.objectType> m__<attribute.nameCapitalized>;
<else>
private <attribute.javaType> m__<attribute.nameCapitalized>;
<endif>

>>

attribute_javadoc(attribute) ::= <<
<!
 Writes the Javadoc for given attribute.
 @param attribute the attribute.
!>
* @param <attribute.nameUncapitalized> the \<i\><attribute.nameCapitalized>\</i> value.
>>

attribute_method_declaration(attribute) ::= <<
<!
 Writes the method declaration for given attribute.
 @param attribute the attribute.
!>
<if(attribute.allowsNull)>
final <attribute.objectType> <attribute.nameUncapitalized>
<else>
final <attribute.javaType> <attribute.nameUncapitalized>
<endif>

>>

immutable_setter_call(attribute) ::= <<
<!
 Writes the method call for the immutable setter of given attribute.
 @param attribute the attribute.
!>
immutableSet<attribute.nameCapitalized>(<attribute.nameUncapitalized>);
<endif>

>>

attribute_accessors(attribute) ::= <<
<!
 Writes the accessors for given attribute.
 @param attribute the attribute.
!>
<attribute_setter(attribute=attribute)>
<attribute_getter(attribute=attribute)>
>>

attribute_setter(attribute) ::= <<
<!
 Writes the setter for given attribute.
 @param attribute the attribute.
!>
/**
 * Specifies the \<i\><attribute.name>\</i\> value.
 * @param value such information.
 */
<if(attribute.allowsNull)>
protected final void immutableSet<attribute.nameCapitalized>(final <attribute.objectType> value)
<else>
protected final void immutableSet<attribute.nameCapitalized>(final <attribute.javaType> value)
<endif>

{
    m__<attribute.nameCapitalized> = value;
}

/**
 * Specifies the \<i\><attribute.name>\</i\> value.
 * @param value such information.
 */
<if(attribute.allowsNull)>
protected void set<attribute.nameCapitalized>(final <attribute.objectType> value)
<else>
protected void set<attribute.nameCapitalized>(final <attribute.javaType> value)
<endif>

{
    immutableSet<attribute.nameCapitalized>(value);
}
>>

attribute_getter(attribute) ::= <<
<!
 Writes the getter for given attribute.
 @param attribute the attribute.
!>
/**
 * Retrieves the \<i\><attribute.name>\</i\> value.
 * @return such information.
 */
<if(attribute.allowsNull)>
protected final <attribute.objectType> immutableGet<attribute.nameCapitalized>()
<else>
protected final <attribute.javaType> immutableGet<attribute.nameCapitalized>()
<endif>

{
    return m__<attribute.nameCapitalized>;
}

<if(attribute.allowsNull)>
public <attribute.objectType> get<attribute.nameCapitalized>()
<else>
public <attribute.javaType> get<attribute.nameCapitalized>()
<endif>

{
<if(attribute.date)>
    Date result = immutableGet<attribute.nameCapitalized>();

    if  (result != null)
    {
        result = new Date(result.getTime());
    }

    return result;
<else>
    return immutableGet<attribute.nameCapitalized>();
<endif>

}
>>
