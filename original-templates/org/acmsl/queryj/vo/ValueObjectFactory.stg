//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2006  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile: $
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate custom value object
//              factory implementations.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group ValueObjectFactory;

source(input) ::= <<
<!
  Generates a custom value object factory implementation.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(tableName=input.table_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.voSubpackageName
  ])>

/*
 * Importing some JDK classes.
 */
import java.lang.ref.WeakReference;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

<class(input=input)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Value object factory for \<i\><tableName>\</i\>.
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
 @param result the custom result.
!>
/**
 * <[
      first_line_description(tableName=input.table_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.vo_name>ValueObjectFactory
{
    /**
     * Singleton implemented to avoid the double-checked locking.
     */
    private static class <input.vo_name>ValueObjectFactorySingletonContainer
    {
        /**
         * The actual singleton.
         */
        public static final <input.vo_name>ValueObjectFactory SINGLETON =
            new <input.vo_name>ValueObjectFactory();
    }

    /**
     * Public constructor to allow reflective instantiation.
     */
    public <input.vo_name>ValueObjectFactory() {};

    /**
     * Retrieves a \<code\><input.vo_name>ValueObjectFactory\</code\>
     * instance.
     * @return such instance.
     */
    public static <input.vo_name>ValueObjectFactory getInstance()
    {
        return <input.vo_name>ValueObjectFactorySingletonContainer.SINGLETON;
    }

    /**
     * Creates a \<code\><input.vo_name>ValueObject\</code> instance.
     <input.attributes:attribute_javadoc(attribute=it); separator="\n">
     */
    public <input.vo_name> create<input.vo_name>(
        <input.attributes:attribute_method_declaration(attribute=it);
          separator=",\n">)
    {
        return
            new <input.vo_name>ValueObject(
                <input.attributes:{<it.nameUncapitalized>};
                separator=",\n">);
    }

    /**
     * Creates a \<code\><input.vo_name>ValueObject\</code> instance.
     <input.attributes:attribute_javadoc(attribute=it); separator="\n">
     */
    public <input.vo_name> create<input.vo_name>ValueObject(
        <input.attributes:attribute_method_declaration(attribute=it);
          separator=",\n">)
    {
        return
            create<input.vo_name>(
                <input.attributes:{<it.nameUncapitalized>};
                  separator=",\n">);
    }

    /**
     * Creates a \<code\><input.vo_name>ValueObject\</code> instance.
     <input.attributes:attribute_javadoc(attribute=it); separator="\n">
     */
    public <input.vo_name> create(
        <input.attributes:attribute_method_declaration(attribute=it);
          separator=",\n">)
    {
        return
            create<input.vo_name>(
                <input.attributes:{<it.nameUncapitalized>};
                  separator=",\n">);
    }

    /**
     * Creates a \<code\><input.vo_name>ValueObject\</code> instance.
     <input.attributes:attribute_javadoc(attribute=it); separator="\n">
     */
    public <input.vo_name> createValueObject(
        <input.attributes:attribute_method_declaration(attribute=it);
          separator=",\n">)
    {
        return
            create<input.vo_name>(
                <input.attributes:{<it.nameUncapitalized>};
                  separator=",\n">);
    }
}
>>

attribute_javadoc(attribute) ::= <<
<!
 Writes the Javadoc for given attribute.
 @param attribute the attribute.
!>
* @param <attribute.nameUncapitalized> the \<i\><attribute.name>\</i> value.
>>

attribute_method_declaration(attribute) ::= <<
<!
 Writes the method declaration for given attribute.
 @param attribute the attribute.
!>
<if(attribute.allowsNull)>
final <attribute.objectType> <attribute.nameUncapitalized>
<else>
final <attribute.javaType> <attribute.nameUncapitalized>
<endif>

>>
