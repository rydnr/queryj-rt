//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2005  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile$
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate AttributeStatementSetters.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group AttributesStatementSetter;

source(input) ::= <<
<!
  Generates an AttributeStatementSetter source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(tableName=input.table_name),
    second_line_description(tableName=input.table_name),
    third_line_description(tableName=input.table_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.subpackage_name,
    input.table_name_normalized_lowercased
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=input.vo_name,
  trSubpackageName=typeInitMap.tableRepositorySubpackageName,
  trName=input.tr_name_capitalized)>

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.queryj.Query;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.PreparedStatementSetter;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(input=input)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Specifies the PreparedStatement values required
>>

second_line_description(tableName) ::= <<
<!
  Generates the second line of the generated file description.
  @param tableName the table name.
!>
to perform any <tableName> operation expecting the
>>

third_line_description(tableName) ::= <<
<!
  Generates the third line of the generated file description.
  @param tableName the table name.
!>
complete attribute set.
>>

project_imports(
  basePackageName, voSubpackageName, voName, trSubpackageName, trName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param voSubpackageName the value-object subpackage name.
 @param voName the value-object name.
 @param trSubpackageName the table repository subpackage name.
 @param trName the table repository name.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<voSubpackageName>.<voName>;
import <basePackageName>.<voSubpackageName>.<voName>ValueObject;
import <basePackageName>.<trSubpackageName>.<trName>TableRepository;
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
/**
 * <[
      first_line_description(tableName=input.table_name),
      second_line_description(tableName=input.table_name),
      third_line_description(tableName=input.table_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.vo_name>AttributesStatementSetter
    implements  PreparedStatementSetter,
                <input.tr_name_capitalized>TableRepository
{
    <input.attributes:attribute_member_declaration(attr=it); separator="\n\n">

    /**
     * The \<i>update\</i> operation.
     */
    private boolean m__bUpdateOperation;

<if(input.clobHandling)>
    /**
     * The \<i>select for update\</i> operation.
     */
    private boolean m__bSelectForUpdateOperation;


<endif>
    /**
     * Creates a \<code><input.vo_name>AttributesStatementSetter\</code>
     * instance.
     <input.attributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
     * @param updateOperation whether the operation is an update.
     */
    public <input.vo_name>AttributesStatementSetter(
        <input.attributes:attribute_isolated_declaration(attr=it);
          separator="\n">
        final boolean updateOperation)
    {
        this(
            <input.nonpk_attributes:{ attr | <attr.nameLowercased>,};
              separator="\n">
            updateOperation);

        <input.pk_attributes:
          { attr | immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);};
          separator="\n">
    }

    /**
     * Creates a \<code><input.vo_name>AttributesStatementSetter\</code>
     * instance.
     <input.nonpk_attributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
     * @param updateOperation whether the operation is an update.
     */
    public <input.vo_name>AttributesStatementSetter(
        <input.nonpk_attributes:attribute_isolated_declaration(attr=it);
          separator="\n">
        final boolean updateOperation)
    {
        <input.nonpk_attributes:
          { attr | immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);};
          separator="\n">
        immutableSetUpdateOperation(updateOperation);
    }

<if(input.clobHandling)>
    /**
     * Creates a \<code><input.vo_name>AttributesStatementSetter\</code>
     * instance.
     <input.nonpk_attributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
     * @param updateOperation whether the operation is an update.
     * @param selectForUpdateOperation whether the operation is a select-for-update.
     */
    public <input.vo_name>AttributesStatementSetter(
        <input.all_but_lob_attributes:attribute_isolated_declaration(attr=it);
          separator="\n">
        final boolean updateOperation,
        final boolean selectForUpdateOperation)
    {
        <input.all_but_lob_attributes:
          { attr | immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);};
          separator="\n">
        immutableSetUpdateOperation(updateOperation);
        immutableSetSelectForUpdateOperation(selectForUpdateOperation);
    }

<endif>

    /**
     * Specifies whether the operation is an update or not.
     * @param updateOperation such information.
     */
    protected final void immutableSetUpdateOperation(
        final boolean updateOperation)
    {
        m__bUpdateOperation = updateOperation;
    }

    /**
     * Specifies whether the operation is an update or not.
     * @param updateOperation such information.
     */
    protected void setUpdateOperation(final boolean updateOperation)
    {
        immutableSetUpdateOperation(updateOperation);
    }

    /**
     * Retrieves whether the operation is an update or not.
     * @return such information.
     */
    public boolean isUpdateOperation()
    {
        return m__bUpdateOperation;
    }

<if(input.clobHandling)>
    /**
     * Specifies whether the operation is a select-for-update or not.
     * @param selectForUpdateOperation such information.
     */
    protected final  void immutableSetSelectForUpdateOperation(
        final boolean selectForUpdateOperation)
    {
        m__bSelectForUpdateOperation = selectForUpdateOperation;
    }

    /**
     * Specifies whether the operation is a select-for-update or not.
     * @param selectForUpdateOperation such information.
     */
    protected void setSelectForUpdateOperation(
        final boolean selectForUpdateOperation)
    {
        immutableSetSelectForUpdateOperation(selectForUpdateOperation);
    }

    /**
     * Retrieves whether the operation is a select-for-update or not.
     * @return such information.
     */
    public boolean isSelectForUpdateOperation()
    {
        return m__bSelectForUpdateOperation;
    }


<endif>
    <input.attributes:attribute_accessor(attr=it); separator="\n\n">

    /**
     * Specifies the values on given \<code>PreparedStatement\</code>
     * @param preparedStatement the prepared statement.
     * @throws SQLException intercepted by \<i>Spring\</i>.
     <precondition_notnull("preparedStatement")>
     <precondition_instanceof(name="preparedStatement", className="Query")>
     */
    public void setValues(final PreparedStatement preparedStatement)
        throws  SQLException
    {
        setValues(
<if(input.clobHandling)>
            preparedStatement,

<else>
            (Query) preparedStatement,

<endif>
            <input.attributes:{attr | get<attr.nameCapitalized>()}; separator=",\n">,
<if(input.clobHandling)>
            isUpdateOperation(),
            isSelectForUpdateOperation());

<else>
            isUpdateOperation());

<endif>
    }

    /**
     * Specifies the values on given \<code>PreparedStatement\</code>
<if(input.clobHandling)>
     * @param preparedStatement the prepared statement.

<else>
     * @param query the query.

<endif>
     <input.attributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
     * @param updateOperation whether the operation is an update.
<if(input.clobHandling)>
     * @param selectForUpdateOperation whether the operation is a
     * select-for-update.

<endif>
     * @throws SQLException intercepted by \<i>Spring\</i>.
<if(input.clobHandling)>
     <precondition_notnull("preparedStatement")>

<else>
     <precondition_notnull("query")>

<endif>
     */
    protected void setValues(
<if(input.clobHandling)>
        final PreparedStatement preparedStatement,

<else>
        final Query query,

<endif>
        <input.attributes:attribute_isolated_declaration(attr=it);
          separator="\n">
<if(input.clobHandling)>
        final boolean updateOperation,
        final boolean selectForUpdateOperation)

<else>
        final boolean updateOperation)

<endif>
      throws  SQLException
    {
<if(input.clobHandling)>
        int t_iIndex = 1;


<endif>
<if(input.clobHandling)>
        if  (updateOperation)
        {
            <input.externally_managed_attributes:
              attribute_preparedstatement_specification(attr=it);
              separator="\n">
        }
<else>
<if(input.externally_managed_attributes)>
        if  (updateOperation)
        {
            <input.externally_managed_attributes:
              attribute_query_specification(attr=it);
              separator="\n">
        }
<endif>
<endif>

<if(input.clobHandling)>
        if  (selectForUpdateOperation)
        {
           <input.all_but_lob_attributes:
             attribute_preparedstatement_specification(attr=it);
             separator="\n">
        }
        else
        {
           <input.all_but_externally_managed_attributes:
             attribute_preparedstatement_specification(attr=it);
             separator="\n">
        }

<else>
        <input.all_but_externally_managed_attributes:
          attribute_query_specification(attr=it);
          separator="\n">

<endif>
    }
}
>>

attribute_member_declaration(attr) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param attr the attribute.
!>
/**
 * The \<i><attr.name>\</i> information.
 */
private <if(attr.clob)>String<else><attr.javaType><endif> <attr.nameLowercased>;
>>

attribute_accessor(attr) ::= <<
<!
 Generates the accessor for a concrete attribute.
 @param attr the attribute.
!>
/**
 * Specifies the \<i><attr.name>\</i> value.
 <attribute_javadoc(name=attr.nameLowercased)>
 */
protected final void immutableSet<attr.nameCapitalized>(
    <attribute_declaration(attr=attr)>)
{
    this.<attr.nameLowercased> = <attr.nameLowercased>;
}

/**
 * Specifies the \<i><attr.name>\</i> value.
 <attribute_javadoc(name=attr.nameLowercased)>
 */
protected void set<attr.nameCapitalized>(
    <attribute_declaration(attr=attr)>)
{
    immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);
}

/**
 * Retrieves the \<i><attr.name>\</i> value.
 <attribute_javadoc(name=attr.nameLowercased)>
 * @return such value.
 */
protected <if(attr.clob)>String<else><attr.javaType><endif> get<attr.nameCapitalized>()
{
    return <attr.nameLowercased>;
}
>>

attribute_query_specification(attr) ::= <<
<!
 Generates the code to specify the attribute into the query.
 @param attr the attribute.
!>
<if(attr.numberSmallerThanInt)>
query.setInt(
<else>
query.set<attr.objectType>(
<endif>

    <attr.tableNameUppercased>.<attr.nameUppercased>.equals(),
    <attr.nameLowercased>);
>>

attribute_preparedstatement_specification(attr) ::= <<
<!
 Generates the code to specify the attribute into the PreparedStatement.
 @param attr the attribute.
!>
<if(!attr.clob)>
<if(attr.allowsNull)>
if  (<attr.nameLowercased> == null)
{
    preparedStatement.setNull(t_iIndex++, <attr.type>);
}
else
{
    preparedStatement.set<attr.objectType>(
        t_iIndex++, <indirect_template(name=attr.objectType + "_to_primitive", input=attr)>);
}
<else>
preparedStatement.set<attr.objectType>(
    t_iIndex++, <attr.nameLowercased>);
<endif>
<endif>


>>
