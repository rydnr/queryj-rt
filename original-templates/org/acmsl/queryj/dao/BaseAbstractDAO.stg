//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2006  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile: $
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate base DAO
//              implementations.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group BaseAbstractDAO;

source(input) ::= <<
<!
  Generates an abstract DAO database implementation source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @param input.dao_class_name the DAO class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(tableName=input.table_name),
    second_line_description(tableName=input.table_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=input.vo_name)>

/*
 * Importing some QueryJ classes.
 */
import org.acmsl.queryj.dao.QueryjJdbcTemplate;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

<class(input=input)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Abstract implementation of the <tableName> DAO
>>

second_line_description(tableName) ::= <<
<!
  Generates the second line of the generated file description.
  @param tableName the table name.
!>
to support static values.
>>

project_imports(
    basePackageName, baseDAOSubpackageName, voSubpackageName, voName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param baseDAOSubpackageName the base DAO subpackage name.
 @param voSubpackageName the base DAO subpackage name.
 @param voName the value-object name.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<baseDAOSubpackageName>.<voName>DAO;
import <basePackageName>.<voSubpackageName>.<voName>;
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
/**
 * <[
      first_line_description(tableName=input.table_name),
      second_line_description(tableName=input.table_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public abstract class Abstract<input.vo_name>DAO
    extends  QueryjJdbcTemplate
    implements  <input.vo_name>DAO
{
    /**
     * The whole constants.
     */
    private static final <input.vo_name>[] _ALL_QUERYJ_CONSTANTS_ =
        new <input.vo_name>[]
        {
            <input.cached_rows:{<it.nameNormalizedUppercased>};
              separator=",\n">
        };

    /**
     * Builds a \<code>Abstract<input.vo_name>DAO\</code> instance
     * with given data source.
     * @param dataSource the required data source.
     <precondition_notnull(name="dataSource")>
     */
    public Abstract<input.vo_name>DAO(final DataSource dataSource)
    {
        super(dataSource);
    }

    /**
     * Retrieves the static (pre-cached) values.
     * @return such information.
     */
    public <input.vo_name>[] getStaticValues()
    {
        <input.vo_name>[] result =
            new <input.vo_name>[_ALL_QUERYJ_CONSTANTS_.length];

        copyArray(_ALL_QUERYJ_CONSTANTS_, result);

        return result;
    }

    /**
     * Copies given array of \<code><input.vo_name>\</code> instances.
     * @param source the source.
     * @param target the target.
     <precondition_notnull(name="source")>
     <precondition_notnull(name="target")>
     <precondition("source.length <= target.length")>
     */
    protected void copyArray(
        final <input.vo_name>[] source, final <input.vo_name>[] target)
    {
        int t_iCount = (source != null) ? source.length : 0;

        for  (int t_iIndex = 0; t_iIndex \< t_iCount; t_iIndex++)
        {
            target[t_iIndex] = source[t_iIndex];
        }
    }

    <input.static_attribute:static_table(
      attribute=it,
      primaryKeyAttributes=input.pk_attributes,
      voName=input.vo_name)>
}
>>

static_table(
  attribute, primaryKeyAttributes, voName) ::= <<
<!
  Generates the method to operate directly on defined constants.
  @param attribute the static attribute.
  @param primaryKeyAttributes the primary key.
  @param voName the value object name.
!>
/**
 * Loads \<i><voName>\</i> information from the constant pool,
 * filtering by <attribute.name>.
 * @param <attribute.nameLowercased> the <attribute.name>
 * to filter.
 * @return the \<code><voName>\</code> instance.
 <precondition_notnull(name=attribute.name)>
 */
public <voName> findConstantBy<attribute.nameCapitalized>(
    final <attribute.javaType> <attribute.name>)
{
    <voName> result = null;

    int t_iLength =
        (_ALL_QUERYJ_CONSTANTS_ != null)
        ?  _ALL_QUERYJ_CONSTANTS_.length
        :  0;

    for  (int t_iIndex = 0; t_iIndex \< t_iLength; t_iIndex++)
    {
        <voName> t_CurrentItem = _ALL_QUERYJ_CONSTANTS_[t_iIndex];

        if  (   (t_CurrentItem != null)
             && (<attribute.nameLowercased>.equals(
                    t_CurrentItem.get<attribute.nameCapitalized>())))
        {
            result = t_CurrentItem;
            break;
        }
    }

    return result;
}

/**
 * Loads \<i><voName>\</i> information from the constant pool,
 * filtering by the primary key.
 <primaryKeyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<code><voName>\</code> instance.
 */
public <voName> findConstantByPk(
  <primaryKeyAttributes:attribute_declaration(attr=it); separator=",\n">)
{
    <voName> result = null;

    int t_iLength =
        (_ALL_QUERYJ_CONSTANTS_ != null)
        ?  _ALL_QUERYJ_CONSTANTS_.length
        :  0;

    boolean t_bFound = false;

    for  (int t_iIndex = 0; t_iIndex \< t_iLength; t_iIndex++)
    {
        <voName> t_CurrentItem = _ALL_QUERYJ_CONSTANTS_[t_iIndex];

        if  (t_CurrentItem != null)
        {
            t_bFound = true;

            <primaryKeyAttributes:static_attribute_check(attr=it);
              separator="\n">

            if  (t_bFound)
            {
                result = t_CurrentItem;
                break;
            }
        }
    }

    return result;
}

>>

static_attribute_check(attr) ::= <<
<!
 Generates the code to perform the static check on given attribute.
 @param attr the attribute
!>
<if(attr.primitive)>
<static_primitive_attribute_check(attr=attr)>
<else>
<static_object_attribute_check(attr=attr)>
<endif>

>>

static_primitive_attribute_check(attr) ::= <<
<!
 Generates the code to perform the static check on given primitive attribute.
 @param attr the attribute
!>
t_bFound =
    (   (t_bFound)
     && (t_CurrentItem.get<attr.nameCapitalized>() == <attr.nameLowercased>));
>>

static_object_attribute_check(attr) ::= <<
<!
 Generates the code to perform the static check on given primitive attribute.
 @param attr the attribute
!>
if  (t_bFound)
{
    Object t_<attr.nameCapitalized> =
        (t_CurrentItem.get<attr.nameCapitalized>();

    if  (t_<attr.nameCapitalized> == null)
    {
        t_bFound = (<attr.name> == null);
    }
    else
    {
        t_bFound = t_<attr.nameCapitalized>.equals(<attr.name>);
    }
}
>>
