//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2006  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile: $
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate base DAO
//              implementations.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group BaseDAO;

source(input) ::= <<
<!
  Generates a DAO database implementation source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @param input.dao_class_name the DAO class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(tableName=input.table_name),
    second_line_description(tableName=input.table_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=input.vo_name)>

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;

<if(input.implement_markers)>
/*
 * Importing some ACM-SL Commons classes.
 */
import org.acmsl.commons.patterns.dao.DAO;
<endif>

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

<class(input=input)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
DAO abstract layer responsible of retrieving
>>

second_line_description(tableName) ::= <<
<!
  Generates the second line of the generated file description.
  @param tableName the table name.
!>
<tableName> structures from persistence layers.
>>

project_imports(basePackageName, voSubpackageName, voName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param voSubpackageName the value-object subpackage name.
 @param voName the value-object name.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<voSubpackageName>.<voName>;
import <basePackageName>.<voSubpackageName>.<voName>ValueObject;
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
/**
 * <[
      first_line_description(tableName=input.table_name),
      second_line_description(tableName=input.table_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public interface <input.vo_name>DAO
<if(input.implement_markers)>
    extends  DAO
<endif>

{
<if(input.static_table)>
    <input.cached_rows:cached_constants(
      row=it, voName=input.vo_name); separator="\n\n">

    /**
     * Retrieves the static (pre-cached) values.
     * @return such information.
     */
    public <input.vo_name>[] getStaticValues();

    <input.static_attribute:find_constant_methods(
      attribute=it,
      primaryKeyAttributes=input.pk_attributes,
      voName=input.vo_name)>
<endif>

    /**
     * Retrieves \<code><input.vo_name>\</code> information
     * filtering by its primary key.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @return the \<code><input.vo_name>\</code> matching given
     * primary key.
     * @throws DataAccessException if the operation fails.
     */
    public <input.vo_name> findByPrimaryKey(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">)
      throws DataAccessException;

    /**
     * Persists \<code><input.vo_name>\</code> information.
     <input.all_but_externally_managed_attributes:attribute_javadoc(
       name=it.nameLowercased); separator="\n">
     * @throws DataAccessException if the operation fails.
     */
    public void insert(
        <input.all_but_externally_managed_attributes:attribute_declaration(
          attr=it); separator=",\n">)
      throws DataAccessException;

    /**
     * Inserts and retrieves the newly-inserted
     * \<code><input.vo_name>\</code> instance.
     <input.all_but_externally_managed_attributes:attribute_javadoc(
       name=it.nameLowercased); separator="\n">
     * @throws DataAccessException if the operation fails.
     */
    public <input.vo_name> create(
        <input.all_but_externally_managed_attributes:attribute_declaration(
          attr=it); separator=",\n">)
      throws DataAccessException;

    /**
     * Updates \<code><input.vo_name>\</code> information.
     <input.attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     */
    public int update(
        <input.attributes:attribute_declaration(attr=it); separator=",\n">)
      throws DataAccessException;

    /**
     * Deletes \<code><input.vo_name>\</code> information.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
     */
    public void delete(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">)
      throws DataAccessException;

    <input.foreign_keys:fk_delete_method(
      foreignKey=it, input=input); separator="\n">

    <input.custom_selects:custom_select(
      cs=it, input=input); separator="\n">

    <input.custom_updates_or_inserts:custom_update_or_insert(
      cs=it, input=input); separator="\n">

    <input.custom_selects_for_update:custom_select_for_update(
      cs=it, input=input); separator="\n">
}
>>

cached_constants(row, voName) ::= <<
<!
 Generates the constant for the cached row.
 @param row the row
 @param voName the value-object name.
!>
/**
 * The <row.name> constant.
 */
public static final <voName> <row.nameNormalizedUppercased> =
    new <voName>ValueObject(
        <row.attributes:attribute_specification(attr=it); separator=",\n">);
>>

attribute_specification(attr) ::= <<
<!
 Prints the value of the attribute, optionally escaping it.
 @param attr the attribute.
!>
<if(attr.string)>"<attr.value>"<else><attr.value><endif>
>>

find_constant_methods(attribute, primaryKeyAttributes, voName) ::= <<
<!
  Declares the methods to operate directly on defined constants.
  @param attribute the static attribute.
  @param primaryKeyAttributes the primary key attributes.
  @param voName the value-object name.
!>
/**
 * Loads \<i><attribute.tableName>\</i> information from the constant pool,
 * filtering by <attribute.name>.
 * @param <attribute.nameLowercased> the <attribute.name>
 * to filter.
 * @return the \<code><voName>\</code> instance.
 <precondition_notnull(name=attribute.name)>
 */
public <voName> findConstantBy<attribute.nameCapitalized>(
    final <attribute.javaType> <attribute.nameLowercased>);

/**
 * Loads \<i><attribute.tableName>\</i> information from the constant pool,
 * filtering by the primary key.
 <primaryKeyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<code><attribute.voName>\</code> instance.
 */
public <voName> findConstantByPk(
  <primaryKeyAttributes:attribute_declaration(attr=it); separator=",\n">);

>>

fk_delete_method(foreignKey,input) ::= <<
<!
  Writes the deleteByXX method for a concrete foreign key.
  @param input.table_name the table name.
  @param foreignKey the foreign key.
!>
/**
<if(foreignKey.allowsNull)>
 * Discards the relation to \<code><foreignKey.targetVoName>\</code> in
 * \<code><foreignKey.sourceVoName>\</code>.
<else>
 * Deletes <input.table_name> information from the persistence layer filtering
 * by given foreign keys.
<endif>

 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
   separator="\n">
 */
<if(foreignKey.allowsNull)>
public void discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr |<attr.nameCapitalized>};
                                                          separator="And">(
<else>
public void deleteBy<foreignKey.attributes:{attr |<attr.nameCapitalized>};
                      separator="And">(
<endif>


    <foreignKey.attributes:primitive_attribute_declaration(attr=it);
      separator=",\n">);
>>

custom_select(cs, input) ::= <<
<!
  Writes the code for a custom select query.
  @param cs the custom select.
  @param input the input.
!>
/**
 * Custom select \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\</b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
public <cs.resultClass> <cs.nameUncapitalized>(
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">)
  throws DataAccessException;
>>

custom_update_or_insert(cs, input) ::= <<
<!
 Writes the subtemplate for custom updates or inserts.
  @param cs the custom sql.
  @param input the input.
!>
/**
 * Custom sql \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\</b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @throws DataAccessException if the operation fails.
 */
public void <cs.nameUncapitalized>(
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">)
  throws DataAccessException;
>>

custom_select_for_update(cs, input) ::= <<
<!
  Writes the code for a custom select for update.
  @param cs the custom sql.
  @param input the input.
!>
/**
 * Custom select for update \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\</b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
public <cs.resultClass> <cs.nameUncapitalized>(
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">)
  throws DataAccessException;
>>
