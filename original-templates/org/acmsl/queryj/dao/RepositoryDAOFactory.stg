//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2005  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile$
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate repository DAO factories.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group DAOFactory;

source(input) ::= <<
<!
  Generates a RepositoryDAOFactory source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package_name the package.
  @param input.dao_class_name the DAO class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.dao_implementation_class_name the DAO implementation class name.
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(engineName=input.engine_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.engine_name_lowercased,
    input.subpackage_name
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  repository=input.tr_name_capitalized)>

/*
 * Importing some QueryJ classes.
 */
import org.acmsl.queryj.dao.JndiUtils;
import org.acmsl.queryj.dao.ThreadAwareDataSourceWrapper;

/*
 * Importing some Spring classes.
 */
import org.springframework.jdbc.CannotGetJdbcConnectionException;
import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;

/*
 * Importing some extension classes.
 */
import javax.sql.DataSource;

/*
 * Importing some commons-logging classes.
 */
import org.apache.commons.logging.LogFactory;

<class(input=input)>
>>

first_line_description(engineName) ::= <<
<!
  Generates a description for the file.
  @param engineName the engine name.
!>
Is able to create the repository DAO.
>>

project_imports(
  basePackageName,
  baseDAOSubpackageName,
  repository) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param baseDAOSubpackageName the BaseDAO subpackage name.
 @param voSubpackageName the value-object subpackage name.
 @param repository the repository.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<baseDAOSubpackageName>.<repository>DAO;
import <basePackageName>.<baseDAOSubpackageName>.<repository>DAOFactory;
>>

class(input) ::= <<
<!
  Generates the class body.
  @param input.dao_factory_implementation_class_name the class name.
  @param input.engine_name the engine name.
  @param input.timestamp the timestamp.
  @param input.dao_factory_implementation_class_name the DAO factory
  implementation class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.jndi_location the JNDI location.
  @param input.table_name the table name.
!>
/**
 * <[
      first_line_description(engineName=input.engine_name)
    ]:{ line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.engine_name><input.tr_name_capitalized>DAOFactory
    extends  <input.tr_name_capitalized>DAOFactory
{
    /**
     * The data source JNDI location.
     */
    public static final String JNDI_LOCATION = "<input.jndi_location>";

    /**
     * Public constructor to allow reflective instantiation.
     */
    public <input.engine_name><input.tr_name_capitalized>DAOFactory() {};

    /**
     * Singleton implemented to avoid the double-check locking.
     */
    private static final class <input.engine_name><input.tr_name_capitalized>DAOFactoryContainer
    {
        /**
         * The singleton instance, lazily loaded.
         */
        private static final <input.engine_name><input.tr_name_capitalized>DAOFactory SINGLETON =
            new <input.engine_name><input.tr_name_capitalized>DAOFactory();
    }

    /**
     * Retrieves a \<code\><input.dao_factory_implementation_class_name>\</code\>
     * instance.
     * @return such instance.
     */
    public static <input.tr_name_capitalized>DAOFactory get<input.engine_name>Instance()
    {
        return <input.engine_name><input.tr_name_capitalized>DAOFactoryContainer.SINGLETON;
    }

    /**
     * Creates <input.engine_name>-specific <input.table_name> DAO.
     * @return such DAO.
     */
    public <input.tr_name_capitalized>DAO create<input.tr_name_capitalized>DAO()
    {
        return create<input.tr_name_capitalized>DAO(getDataSource());
    }

    /**
     * Creates <input.engine_name>-specific <input.table_name> DAO
     * using given data source.
     * @param dataSource the data source.
     * @return such DAO.
     <precondition_notnull("dataSource")>
     */
    protected <input.tr_name_capitalized>DAO create<input.tr_name_capitalized>DAO(final DataSource dataSource)
    {
        <input.tr_name_capitalized>DAO result = null;

        if  (dataSource != null)
        {
            result = new <input.engine_name><input.tr_name_capitalized>DAO(dataSource);
        }

        return result;
    }

    /**
     * Retrieves the data source.
     * @return such data source.
     */
    protected DataSource getDataSource()
    {
        return getDataSource(JndiUtils.getInstance());
    }

    /**
     * Retrieves the data source.
     * @param jndiUtils the \<code\>JndiUtils\</code\> instance.
     * @return such data source.
     <precondition_notnull("jndiUtils")>
     */
    protected DataSource getDataSource(final JndiUtils jndiUtils)
    {
        DataSource result = null;

        try
        {
            result = jndiUtils.getDataSourceFromJndi(JNDI_LOCATION);
        }
        catch  (final CannotGetJdbcConnectionException cannotGetJdbcConnection)
        {
            // Assuming JNDI not available. The only way to retrieve
            // the DataSource is reduced to transactional (thread-based)
            // operations.
            try
            {
                LogFactory.getLog(<input.engine_name><input.tr_name_capitalized>DAOFactory.class).info(
                      "DataSource not present in JNDI context. "
                    + "Assuming JNDI is not enabled.");
            }
            catch  (final Throwable throwable)
            {
                // Class loading problem.
            }
        }

        if  (result == null)
        {
            result = new ThreadAwareDataSourceWrapper();
        }
        else
        {
            try
            {
                result = new ThreadAwareDataSourceWrapper(result);
            }
            catch  (final CannotGetJdbcConnectionException exception)
            {
                try
                {
                    LogFactory.getLog(<input.engine_name><input.tr_name_capitalized>DAOFactory.class).error(
                        "Cannot retrieve connection", exception);
                }
                catch  (final Throwable throwable)
                {
                    // class-loading problem.
                }
            }
            catch  (final Throwable throwable)
            {
                try
                {
                    LogFactory.getLog(<input.engine_name><input.tr_name_capitalized>DAOFactory.class).error(
                        "Cannot retrieve data source", throwable);
                }
                catch  (final Throwable anotherThrowable)
                {
                    // class-loading problem.
                }
            }
        }

        return result;
    }
}
>>
