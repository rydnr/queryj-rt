//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2006  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile$
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAO database-based
//              implementations.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group DAO;

source(input) ::= <<
<!
  Generates a DAO database implementation source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @param input.dao_class_name the DAO class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(
      tableName=input.table_name,
      engineName=input.engine_name,
      engineVersion=input.engine_version),
    second_line_description(
      tableName=input.table_name,
      engineName=input.engine_name,
      engineVersion=input.engine_version),
    third_line_description(
      tableName=input.table_name,
      engineName=input.engine_name,
      engineVersion=input.engine_version)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.subpackage_name
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  subpackageName=input.subpackage_name,
  tableName=input.table_name,
  tableNameLowercased=input.table_name_normalized_lowercased,
  jdbcOperationsSubpackageName=typeInitMap.jdbcOperationsSubpackageName,
  customResults=input.custom_results,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=input.vo_name,
  voFactorySubpackageName=typeInitMap.voFactorySubpackageName,
  rdbSubpackageName=typeInitMap.rdbSubpackageName,
  trSubpackageName=typeInitMap.tableRepositorySubpackageName,
  trName=input.tr_name_capitalized,
  damSubpackageName=typeInitMap.dataAccessManagerSubpackageName,
  fkssSubpackageName=typeInitMap.foreignKeyStatementSetterSubpackageName,
  fkAttributes=input.fk_attributes,
  referringVoNames=input.referring_vo_names,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName)>

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.queryj.DeleteQuery;
<if(input.static_table)>
<else>
import org.acmsl.queryj.dao.QueryjJdbcTemplate;
<endif>

import org.acmsl.queryj.InsertQuery;
import org.acmsl.queryj.Query;
import org.acmsl.queryj.QueryFactory;
import org.acmsl.queryj.SelectQuery;
import org.acmsl.queryj.UpdateQuery;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ParameterDisposer;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.SqlParameter;
<if(input.lobHandling)>
import org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCreator;
import org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor;
<endif>

import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.object.SqlQuery;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.transaction.TransactionException;
import org.springframework.transaction.TransactionStatus;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Types;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(input=input,foreign_keys_by_table=input.foreign_keys_by_table)>
>>

first_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
DAO implementation responsible of managing the access to
>>

second_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
 <tableName> entities from <engineName>
>>

third_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
(<engineVersion>) persistence layers.
>>

project_imports(
 basePackageName,
 subpackageName,
 tableName,
 tableNameLowercased,
 jdbcOperationsSubpackageName,
 customResults,
 voSubpackageName,
 voName,
 voFactorySubpackageName,
 rdbSubpackageName,
 trSubpackageName,
 trName,
 damSubpackageName,
 fkssSubpackageName,
 fkAttributes,
 referringVoNames,
 baseDAOSubpackageName) ::= <<
<!
 Generates the project imports
 @param basePackageName the base package name.
 @param subpackageName the subpackage name.
 @param tableName the table name.
 @param tableNameLowercased the table name, in lower-case.
 @param jdbcOperationsSubpackageName the subpackage for the JDBC operations.
 @param customResults the results of the custom queries.
 @param voSubpackageName the subpackage for the value
 @param voName the class name of the value-object.
 @param voFactorySubpackageName the subpackage of the value object factories.
 @param rdbSubpackageName the subpackage common of all RDBMs implementations.
 @param trSubpackageName the subpackage of the table repository.
 @param trName the name of the table repository.
 @param damSubpackageName the subpackage of the DataAccessManager.
 @param fkssSubpackageName the subpackage of the foreign key attribute
 statement setter.
 @param fkAttributes the foreign key attributes.
 @param referringVoNames the VO names of the referring tables.
 @param baseDAOSubpackageName the subpackage of the base DAO interface.
!>
/*
 * Importing project-specific classes.
 */
<if(input.static_table)>
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.Abstract<voName>DAO;
<endif>

import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<subpackageName>.<tableNameLowercased>.<voName>AttributesStatementSetter;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<subpackageName>.<tableNameLowercased>.<voName>PkStatementSetter;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<subpackageName>.<tableNameLowercased>.<voName>ResultSetExtractor;
<customResults:resultset_extractor_import(
  basePackageName=basePackageName,
  baseDAOSubpackageName=baseDAOSubpackageName,
  rdbSubpackageName=rdbSubpackageName,
  subpackageName=subpackageName,
  crseIdCapitalized=it.idCapitalized); separator="\n">
import <basePackageName>.<voSubpackageName>.<voName>;
import <basePackageName>.<voFactorySubpackageName>.<voName>ValueObjectFactory;
import <basePackageName>.<baseDAOSubpackageName>.<voName>DAO;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.QueryPreparedStatementCreator;
import <basePackageName>.<trSubpackageName>.<trName>TableRepository;
import <basePackageName>.<damSubpackageName>.<trName>DataAccessManager;
<fkAttributes:foreignkey_statementsetter_import(
  basePackageName=basePackageName,
  rdbSubpackageName=rdbSubpackageName,
  subpackageName=subpackageName,
  tableNameLowercased=tableNameLowercased,
  foreignKey=it); separator="\n">
<fkAttributes:foreignkey_dao_import(
  basePackageName=basePackageName,
  baseDAOSubpackageName=baseDAOSubpackageName,
  referredVOName=it.sourceVoName); separator="\n">
<referringVoNames:{voName|import <basePackageName>.<baseDAOSubpackageName>.<voName>DAO;};
  separator="\n">
>>

foreignkey_statementsetter_import(
  basePackageName,
  rdbSubpackageName,
  subpackageName,
  tableNameLowercased,
  foreignKey) ::= <<
<!
 Generates the import statement of a foreign key statement setter.
 @param basePackageName the base package.
 @param rdbSubpackageName the subpackage of the relational db implementations.
 @param subpackageName the subpackage name.
 @param tableNameLowercased the table name, lowercased.
 @param foreignKey the foreign key.
!>
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<subpackageName>.<tableNameLowercased>.<foreignKey.targetVoName>By<foreignKey.sourceVoName>StatementSetter;
>>

foreignkey_dao_import(
  basePackageName,
  baseDAOSubpackageName,
  referredVOName) ::= <<
<!
  Generates the import statement of a foreign key DAO.
  @param baseDAOSubpackageName the subpackage of the base DAO interface.
  @param referredVOName the referred value object name.
!>
import <basePackageName>.<baseDAOSubpackageName>.<referredVOName>DAO;
>>

class(input,foreign_keys_by_table) ::= <<
<!
  Generates the class body.
  @param input.vo_name the value object name.
  @param input.engine_name the engine name.
  @param input.engine_version the engine version.
  @param input.timestamp the timestamp.
  @param input.custom_results the results for the custom queries.
  @param input.tr_name the table repository name.
  @param foreign_keys_by_table a map of table-name->foreign_key
!>
/**
 * <[
      first_line_description(
        tableName=input.table_name,
        engineName=input.engine_name,
        engineVersion=input.engine_version),
      second_line_description(
        tableName=input.table_name,
        engineName=input.engine_name,
        engineVersion=input.engine_version),
      third_line_description(
        tableName=input.table_name,
        engineName=input.engine_name,
        engineVersion=input.engine_version)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.engine_name><input.vo_name>DAO
<if(input.static_table)>
  extends     Abstract<input.vo_name>DAO
  implements  <input.tr_name_capitalized>TableRepository
<else>
  extends     QueryjJdbcTemplate
  implements  <input.vo_name>DAO,
              <input.tr_name_capitalized>TableRepository
<endif>

{
    /**
     * The result set extractor for \<i><input.vo_name>\</i>
     * value objects.
     */
    public static final ResultSetExtractor
        <input.table_name_uppercased>_EXTRACTOR =
            new <input.vo_name>ResultSetExtractor();

    /**
     * The result set extractor for \<i><input.vo_name>\</i>
     * primary keys (see inner class).
     */
    public static final ResultSetExtractor
        <input.table_name_uppercased>_PK_EXTRACTOR =
            new <input.vo_name>PkResultSetExtractor();

    <input.custom_results:resultset_extractor_constants(
      crseid=it.id,
      crseidCapitalized=it.idCapitalized,
      crseidNormalizedUppercased=it.idNormalizedUppercased); separator="\n\n">

    /**
     * Builds a \<code><input.class_name>\</code> instance
     * with given data source.
     * @param dataSource the required data source.
     <precondition_notnull("dataSource")>
     */
    public <input.class_name>(final DataSource dataSource)
    {
        super(dataSource);
    }

    /**
     * Builds the query for finding the \<i><input.vo_name>\</i>
     * information searching by its primary key.
     * @return the \<code>SelectQuery\</code> instance.
     */
    protected Query buildFindByPrimaryKeyQuery()
    {
        return buildFindByPrimaryKeyQuery(QueryFactory.getInstance());
    }

    /**
     * Creates the query for finding the \<i><input.table_name>\</i>
     * information searching by its primary key.
     * @param queryFactory the \<code>QueryFactory\</code> instance.
     * @return the \<code>SelectQuery\</code> instance.
     <precondition_notnull("queryFactory")>
     */
    protected Query buildFindByPrimaryKeyQuery(
        final QueryFactory queryFactory)
    {
        SelectQuery result = queryFactory.createSelectQuery();

        buildFindByPrimaryKeyQuery(result);

        return result;
    }

    /**
     * Builds the query for finding the \<i><input.table_name>\</i>
     * information searching by its primary key.
     * @param query the \<code>SelectQuery\</code> to configure.
     <precondition_notnull("query")>
     */
    protected void buildFindByPrimaryKeyQuery(final SelectQuery query)
    {
        query.select(<input.table_name_uppercased>.getAll());
        query.from(<input.table_name_uppercased>);
        <input.pk_attributes:attribute_query_filter(
          tableRepositoryName=input.tr_name_capitalized,
          tableNameUppercased=input.table_name_uppercased,
          nameUppercased=it.nameUppercased); separator="\n">
    }

    /**
     * Retrieves \<code><input.vo_name>\</code> information
     * filtering by its primary key.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @return the \<code><input.vo_name>\</code> matching given
     * primary key.
     * @throws DataAccessException if the operation fails.
     */
    public <input.vo_name> findByPrimaryKey(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">)
      throws DataAccessException
    {
        return
            findByPrimaryKey(
                <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">,
                buildFindByPrimaryKeyQuery(),
                getDataSource());
    }

    /**
     * Retrieves \<code><input.vo_name>\</code> information
     * filtering by its primary key.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @param query the query to find by primary key.
     * @param dataSource the \<code>DataSource\</code> instance.
     * @return the \<code><input.vo_name>\</code> matching given
     * primary key.
     * @throws DataAccessException if the operation fails.
     <precondition_notnull("dataSource")>
     */
    protected <input.vo_name> findByPrimaryKey(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">,
        final Query query,
        final DataSource dataSource)
      throws DataAccessException
    {
        return
            findByPrimaryKey(
                <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">,
                query,
                new DataSourceTransactionManager(dataSource));
    }

    /**
     * Retrieves \<code><input.vo_name>\</code> information
     * filtering by its primary key.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @param query the query to find by primary key.
     * @param transactionManager the \<code>PlatformTransactionManager\</code>
     * instance.
     * @return the \<code><input.vo_name>\</code> matching given
     * primary key.
     * @throws DataAccessException if the operation fails.
     <precondition_notnull("query")>
     <precondition_notnull("transactionManager")>
     */
    protected <input.vo_name> findByPrimaryKey(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">,
        final Query query,
        final PlatformTransactionManager transactionManager)
      throws DataAccessException
    {
        <input.vo_name> result = null;

        // Enabling transactions temporarily.
        synchronized (DataSourceTransactionManager.class)
        {
            result =
                findByPrimaryKey(
                    <input.pk_attributes:{<it.nameLowercased>};
                      separator=",\n">,
                    query,
                    new TransactionTemplate(transactionManager));
        }

        return result;
    }

    /**
     * Retrieves \<code><input.vo_name>\</code> information
     * filtering by its primary key.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @param query the query to find by primary key.
     * @param transactionTemplate the \<code>TransactionTemplate\</code>
     * instance.
     * @return the \<code><input.vo_class_name>\</code> matching given
     * primary key.
     * @throws DataAccessException if the operation fails.
     <precondition_notnull("query")>
     <precondition_notnull("transactionTemplate")>
     */
    protected <input.vo_name> findByPrimaryKey(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">,
        final Query query,
        final TransactionTemplate transactionTemplate)
      throws DataAccessException
    {
        return
            (<input.vo_name>)
                transactionTemplate.execute(
                    new QueryTransactionCallback(
                        new QueryPreparedStatementCreator(query),
                        new <input.vo_name>PkStatementSetter(
                            <input.pk_attributes:{<it.nameLowercased>};
                              separator=",\n">),
                        <input.table_name_uppercased>_EXTRACTOR,
                        this));
    }

<if(input.clobHandling)>
    <indirect_template(name=input.clobHandling+"Insert", input=input)>
<else>
    <defaultInsert(input=input)>
<endif>

    /**
     * Builds the query required to \<i>update\</i> a concrete
     * \<code><input.vo_name>\</code> entity, determined by its primary key.
     * @return the \<code>UpdateQuery\</code> instance.
     */
    protected Query buildUpdateQuery()
    {
        return buildUpdateQuery(QueryFactory.getInstance());
    }

    /**
     * Builds the query required to \<i>update\</i> a concrete
     * \<code><input.vo_name>\</code> entity, determined by its primary key.
     * @param queryFactory the \<code>QueryFactory\</code> instance.
     * @return the \<code>UpdateQuery\</code> instance.
     <precondition_notnull("queryFactory")>
     */
    protected Query buildUpdateQuery(final QueryFactory queryFactory)
    {
        UpdateQuery result = queryFactory.createUpdateQuery();

        buildUpdateQuery(result);

        return result;
    }

    /**
     * Builds the query required to \<i>update\</i> a concrete
     * \<code><input.vo_name>\</code> entity, determined by its primary key.
     * @param query the \<code>UpdateQuery\</code> instance to set up.
     <precondition_notnull("query")>
     */
    protected void buildUpdateQuery(final UpdateQuery query)
    {
        query.update(<input.table_name_uppercased>);
        <input.nonpk_attributes:attribute_query_update(
          tableRepositoryName=input.tr_name_capitalized,
          tableNameUppercased=input.table_name_uppercased,
          nameUppercased=it.nameUppercased); separator="\n">
        <input.pk_attributes:attribute_query_filter(
          tableRepositoryName=input.tr_name_capitalized,
          tableNameUppercased=input.table_name_uppercased,
          nameUppercased=it.nameUppercased); separator="\n">
    }

    /**
     * Updates \<code><input.vo_name>\</code> information.
     <input.attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     */
    public int update(
        <input.attributes:attribute_declaration(attr=it); separator=",\n">)
      throws DataAccessException
    {
        return
            update(
                <input.attributes:{<it.nameLowercased>}; separator=",\n">,
                buildUpdateQuery(),
                getDataSource());
    }

    /**
     * Updates \<code><input.vo_name>\</code> information.
     <input.attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @param query the query used to perform the update operation.
     * @param dataSource the \<code>DataSource\<code> instance.
     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     <precondition_notnull("query")>
     <precondition_notnull("dataSource")>
     */
    protected int update(
        <input.attributes:attribute_declaration(attr=it); separator=",\n">,
        final Query query,
        final DataSource dataSource)
      throws DataAccessException
    {
        return
            update(
                <input.attributes:{<it.nameLowercased>}; separator=",\n">,
                query,
                new DataSourceTransactionManager(dataSource));
    }

    /**
     * Updates \<code><input.vo_name>\</code> information.
     <input.attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @param query the query used to perform the update operation.
     * @param transactionManager the \<code>PlatformTransactionManager\<code>
     * instance.
     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     <precondition_notnull("query")>
     <precondition_notnull("transactionManager")>
     */
    protected int update(
        <input.attributes:attribute_declaration(attr=it); separator=",\n">,
        final Query query,
        final PlatformTransactionManager transactionManager)
      throws DataAccessException
    {
        int result;

        // Enabling transactions temporarily.
        synchronized (DataSourceTransactionManager.class)
        {
            result =
                update(
                    <input.attributes:{<it.nameLowercased>}; separator=",\n">,
                    query,
                    new TransactionTemplate(transactionManager));
        }

        return result;
    }

    /**
     * Updates \<code><input.vo_name>\</code> information.
     <input.attributes:attribute_javadoc(name=it.nameLowercased); 
       separator="\n">
     * @param query the query used to perform the update operation.
     * @param transactionManager the \<code>PlatformTransactionManager\<code>
     * instance.
     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     <precondition_notnull("query")>
     <precondition_notnull("transactionManager")>
     */
    protected int update(
        <input.attributes:attribute_declaration(attr=it); separator=",\n">,
        final Query query,
        final TransactionTemplate transactionTemplate)
      throws DataAccessException
    {
        int result = -10;

        Object t_Result =
            transactionTemplate.execute(
                new UpdateTransactionCallback(
                    new QueryPreparedStatementCreator(query),
                    new <input.vo_name>AttributesStatementSetter(
                        <input.attributes:{<it.nameLowercased>};
                          separator=",\n">,
                        true),
                    this));

        if  (t_Result instanceof Integer)
        {
            result = ((Integer) t_Result).intValue();
        }

        return result;
    }

    /**
     * Builds the query required to \<i>delete\</i> a concrete
     * \<code><input.vo_name>\</code> entity, determined by its primary key.
     * @return the \<code>DeleteQuery\</code> instance.
     */
    protected Query buildDeleteQuery()
    {
        return buildDeleteQuery(QueryFactory.getInstance());
    }

    /**
     * Builds the query required to \<i>delete\</i> a concrete
     * \<code><input.vo_name>\</code> entity, determined by its primary key.
     * @param queryFactory the \<code>QueryFactory\</code>
     * instance.
     * @return the \<code>DeleteQuery\</code> instance.
     <precondition_notnull("queryFactory")>
     */
    protected Query buildDeleteQuery(
        final QueryFactory queryFactory)
    {
        DeleteQuery result = queryFactory.createDeleteQuery();

        buildDeleteQuery(result);

        return result;
    }

    /**
     * Builds the query required to \<i>delete\</i> a concrete
     * \<code><input.vo_name>\</code> entity, determined by its primary key.
     * @param query the \<code>DeleteQuery\</code> instance.
     <precondition_notnull("query")>
     */
    protected void buildDeleteQuery(final DeleteQuery query)
    {
        query.deleteFrom(<input.table_name_uppercased>);
        <input.pk_attributes:attribute_query_filter(
          tableRepositoryName=input.tr_name_capitalized,
          tableNameUppercased=input.table_name_uppercased,
          nameUppercased=it.nameUppercased); separator="\n">
    }

    /**
     * Deletes \<code><input.vo_name>\</code> information."
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     */
    protected void deleteNoFk(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">)
    {
        deleteNoFk(
            <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">,
            buildDeleteQuery(),
            getDataSource());
    }

    /**
     * Deletes \<code><input.vo_name>\</code> information."
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @param query the query used to perform the delete operation.
     * @param dataSource the \<code>DataSource\<code> instance.
     <precondition_notnull("query")>
     <precondition_notnull("dataSource")>
     */
    protected void deleteNoFk(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">,
        final Query query,
        final DataSource dataSource)
    {
        deleteNoFk(
            <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">,
            query,
            new DataSourceTransactionManager(dataSource));
    }

    /**
     * Deletes \<code><input.vo_name>\</code> information."
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @param query the query used to perform the delete operation.
     * @param transactionManager the \<code>PlatformTransactionManager\<code>
     * instance.
     <precondition_notnull("query")>
     <precondition_notnull("transactionManager")>
     */
    protected void deleteNoFk(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">,
        final Query query,
        final PlatformTransactionManager transactionManager)
    {
        // Enabling transactions temporarily.
        synchronized (DataSourceTransactionManager.class)
        {
            deleteNoFk(
                <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">,
                query,
                new TransactionTemplate(transactionManager));
        }
    }

    /**
     * Deletes \<code><input.vo_name>\</code> information."
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @param query the query used to perform the delete operation.
     * @param transactionTemplate the \<code>TransactionTemplate\<code>
     * instance.
     <precondition_notnull("query")>
     <precondition_notnull("transactionTemplate")>
     */
    protected void deleteNoFk(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">,
        final Query query,
        final TransactionTemplate transactionTemplate)
    {
        transactionTemplate.execute(
            new UpdateTransactionCallback(
                new QueryPreparedStatementCreator(query),
                new <input.vo_name>PkStatementSetter(
                    <input.pk_attributes:{<it.nameLowercased>};
                      separator=",\n">),
                this));
    }

    /**
     * Deletes \<code><input.vo_name>\</code> information.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     */
    public void delete(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">)
      throws DataAccessException
    {
<if(input.fk_attributes)>
        delete(
            <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">,
            <input.tr_name_capitalized>DataAccessManager.getInstance());
    }

    /**
     * Deletes \<code><input.vo_name>\</code> information.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased);
       separator="\n">
     * @param dataAccessManager the \<code><input.tr_name_capitalized>DataAccessManager\</code>
     * instance.
     <precondition_notnull("dataAccessManager")>
     */
    protected void delete(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">,
        final <input.tr_name_capitalized>DataAccessManager dataAccessManager)
      throws DataAccessException
    {
        <input.referring_tables:fk_dao_delete_calls(
          referringTable=it,
          fkMap=input.foreign_keys_by_table,
          ownFks=input.own_foreign_keys,
          pkAttributes=input.pk_attributes);
          separator="\n\n">
<endif>

        deleteNoFk(
            <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">);
    }

    <input.referring_tables:fk_dao_delete_methods(
      referringTable=it,
      fkMap=input.foreign_keys_by_table,
      ownFks=input.own_foreign_keys,
      voName=input.vo_name);
      separator="\n\n">

    <input.foreign_keys:fk_delete_method(
      foreignKey=it, input=input); separator="\n">

    <input.foreign_keys:fk_discard_relation_method(
      foreignKey=it, input=input);
      separator="\n\n">

    <input.custom_selects:custom_select(
      cs=it,
      input=input); separator="\n">

    <input.custom_updates_or_inserts:custom_update_or_insert(
      cs=it,
      input=input); separator="\n">

    /**
     * Extracts \<i><input.vo_name>\</i> value objects from result sets.
     * @author \<a href="http://maven.acm-sl.org/queryj">QueryJ\</a>
     */
    public static class <input.vo_name>PkResultSetExtractor
        implements  ResultSetExtractor
    {
        // \<extract data>
        /**
         * Extracts \<i><input.vo_name>\</i> information from given result set.
         * @param resultSet the result set.
         * @return the \<code><input.vo_name>\</code> or \<code>null\</code>
         * if the operation returned no data.
         * @throws SQLException intercepted by \<i>Spring\</i>.
         * @throws DataAccessException with information about any
         * custom exception.
         <precondition_notnull("resultSet")>
         */
        public Object extractData(final ResultSet resultSet)
            throws  SQLException,
                    DataAccessException
        {
            Map result = new HashMap();

            if  (resultSet.next())
            {
                int t_iIndex = 1;

                <input.pk_attributes:pk_resultset_extractor_parameter_retrieval(
                  name=it.nameLowercased,
                  getterMethod=it.getterMethod,
                  objectType=it.objectType,
                  isPrimitive=it.primitive)>
            }

            return result;
        }
        // \</extract data>
    }

    /**
     * Executes the update method on JdbcTemplate class.
     * @param creator the \<code>PreparedStatementCreator\</code> instance.
     * @param setter the \<code>PreparedStatementSetter\</code> instance.
     */
    public int update(
        final PreparedStatementCreator creator,
        final PreparedStatementSetter setter)
    {
        return super.update(creator, setter);
    }

    /**
     * Executes the query method on JdbcTemplate class.
     * @param creator the \<code>PreparedStatementCreator\</code> instance.
     * @param setter the \<code>PreparedStatementSetter\</code> instance.
     * @param extractor the \<code>ResultSetExtractor\</code> instance.
     */
    public Object query(
        final PreparedStatementCreator creator,
        final PreparedStatementSetter setter,
        final ResultSetExtractor extractor)
    {
        return super.query(creator, setter, extractor);
    }

    <inner_transaction_callbacks(
      daoName=input.engine_name+input.vo_name,
      voName=input.vo_name,
      clobHandling=input.clobHandling)>
}
>>

pk_resultset_extractor_parameter_retrieval(
  name, getterMethod, objectType, isPrimitive) ::= <<
<!
  Generates the piece of code to build a concrete value-object attribute.
  @param name the attribute name.
  @param getterMethod the getter method associated to such attribute.
  @param objectType the attribute type (Java version).
  @param isPrimitive whether the attribute is modelled as an instance or as
  a primitive type.
!>
result.put(
    "<name>",
<if(isPrimitive)>
    new <objectType>(resultSet.<getterMethod>(t_iIndex++)));
<else>
    resultSet.<getterMethod>(t_iIndex++));
<endif>
>>

attribute_query_filter(
  tableRepositoryName,
  tableNameUppercased,
  nameUppercased) ::= <<
<!
  Writes the sentence to configure a query to filter by a concrete attribute.
  @param tableRepositoryName the name of the table repository.
  @param tableNameUppercased the table name, in upper-case.
  @param nameUppercased the attribute name, in upper-case.
!>
query.where(<tableNameUppercased>.<nameUppercased>.equals());
>>

attribute_query_insert(
  tableRepositoryName,
  tableNameUppercased,
  nameUppercased) ::= <<
<!
  Writes the sentence to specify an attribute value inside an insert query.
  @param tableRepositoryName the name of the table repository.
  @param tableNameUppercased the table name, in upper-case.
  @param nameUppercased the attribute name, in upper-case.
!>
query.value(<tableNameUppercased>.<nameUppercased>);
>>

em_attribute_value_retrieval(
  query,
  nativeType,
  nameLowercased,
  type) ::= <<
<!
  Writes the sentence to retrieve an externally-managed value.
  @param query the query to retrieve the externally-managed value.
  @param nativeType the native type of the attribute (Java-specific).
  @param nameLowercased the attribute name, in lower-case.
  @param type the type.
!>
t_mMap =
    (Map)
        transactionTemplate.execute(
            new QueryTransactionCallback(
                "<query>",
                <input.table_name_uppercased>_PK_EXTRACTOR,
                this));

<nativeType> <nameLowercased> =
    ((<type>) t_mMap.get("<nameLowercased>")).<nativeType>Value();
>>

attribute_query_update(
  tableRepositoryName,
  tableNameUppercased,
  nameUppercased) ::= <<
<!
  Writes the sentence to specify an attribute value inside an update query.
  @param tableRepositoryName the name of the table repository.
  @param tableNameUppercased the table name, in upper-case.
  @param nameUppercased the attribute name, in upper-case.
!>
query.set(<tableNameUppercased>.<nameUppercased>);
>>

fk_dao_delete_calls(referringTable, fkMap, ownFks, pkAttributes) ::= <<
<!
 Writes the code needed to use the DAOs associated to any
 foreign key to perform a delete operation.
 @param referringTable the referring table.
 @param fkMap the referringTable->foreign_key map.
 @param ownFks the list of flags indicating whether a foreign key starts
 and ends in the template's table.
 @param pkAttributes the primary keys.
 the fk defines a relationship between entities of the same kind.
!>
<fkMap.(referringTable),ownFks:{fk,own|<fk_dao_delete_call(
  foreignKey=fk, own=own, pkAttributes=pkAttributes)>};
  separator="\n\n">
>>

fk_dao_delete_call(foreignKey, own, pkAttributes) ::= <<
<!
 Writes the code needed to use the DAO associated to a
 concrete foreign key to perform a delete operation.
 @param foreignKey the foreign key.
 @param own whether the foreign key defines a relationship between entities of
 the same kind.
 @param pkAttributes the primary keys.
!>
<if(foreignKey)>
<if(foreignKey.allowsNull)>
discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                                              separator="And">(
<if(own)>
    <pkAttributes:to_primitive(attr=it); separator=",\n">);
<else>
    <foreignKey.attributes:to_primitive(attr=it); separator=",\n">,
    dataAccessManager.get<foreignKey.sourceVoName>DAO());
<endif>
<else>
<if(own)>
<else>
deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">(
    <pkAttributes:to_primitive(attr=it); separator=",\n">,
    dataAccessManager.get<foreignKey.sourceVoName>DAO());
<endif>
<endif>
<endif>

>>

fk_dao_delete_methods(referringTable, fkMap, ownFks, voName) ::= <<
<!
 Writes the code that actually requests the recursive deletion of the
 referring tables.
 @param referringTable the referring table.
 @param fkMap the foreign key map.
 @param ownFks the list of flags indicating whether a foreign key starts
 and ends in the template's table.
 @param voName the ValueObject name.
!>
<fkMap.(referringTable),ownFks:{fk,own|<if(fk)><fk_dao_delete_method(
  foreignKey=fk, voName=voName, own=own)><endif>};
  separator="\n\n">
>>

fk_dao_delete_method(foreignKey, voName, own) ::= <<
<!
 Writes the code that actually requests the recursive deletion of the
 referring tables.
 @param foreignKey the foreign key.
 @param voName the ValueObject name.
 @param own whether the foreign key represents a relationship between
 entities of the same kind.
!>
<if(own)>
<else>
/**
<if(foreignKey.allowsNull)>
 * Discards the relation to \<code><foreignKey.targetVoName>\</code> in
 * \<code><foreignKey.sourceVoName>\</code>.
<else>
 * Deletes the references to \<code><foreignKey.targetVoName>\</code> in
 * \<code><foreignKey.sourceVoName>\</code>.
<endif>

 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
  separator="\n">
 * @param dao the \<code><foreignKey.sourceVoName>DAO\</code> instance.
 <precondition_notnull("dao")>
 */
<if(foreignKey.allowsNull)>
protected void discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                                  separator="And">(
<else>
protected void deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                         separator="And">(
<endif>

<if(own)>
    <foreignKey.attributes:primitive_attribute_declaration(attr=it);
      separator=",\n">)
<else>
    <foreignKey.attributes:primitive_attribute_declaration(attr=it);
      separator=",\n">,
    final <foreignKey.sourceVoName>DAO dao)
<endif>

{
    <if(own)>
    /* TODO
    <if(foreignKey.allowsNull)>
        discardRelationTo<voName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                                     separator="And">(
    <else>
        deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                  separator="And">(
    <endif>
    <else>
    <if(foreignKey.allowsNull)>
        dao.discardRelationTo<voName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                                     separator="And">(
    <else>
        dao.deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                  separator="And">(
    <endif>
    <endif>

        <foreignKey.attributes:{<it.nameLowercased>}; separator=",\n">);
    <if(own)>
    */
    <endif>

}
<endif>

>>

dao_javadoc(name,uncapitalizedName) ::= <<
<!
  Writes the Javadoc for a DAO parameter.
  @param name the name of the DAO.
  @param uncapitalizedName the name of the DAO, uncapitalized.
!>
* @param <uncapitalizedName>DAO the \<i><name>DAO\</i> instance.
>>

dao_declaration(name,uncapitalizedName) ::= <<
<!
  Writes the Javadoc for a DAO parameter.
  @param name the name of the DAO.
  @param uncapitalizedName the name of the DAO, uncapitalized.
!>
final <name>DAO <uncapitalizedName>DAO
>>

fk_delete_method(foreignKey,input) ::= <<
<!
  Writes the deleteByXX method for a concrete foreign key.
  @param input.table_name the table name.
  @param foreignKey the foreign key.
!>
<if(foreignKey.allowsNull)>
<else>
/**
 * Builds the query required to \<i>delete\</i> a concrete
 * \<code><input.table_name>\</code> entity, determined by a foreign key.
 * @return the \<code>DeleteQuery\</code> instance.
 */
protected Query buildDeleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query()
{
    return buildDeleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(QueryFactory.getInstance());
}

/**
 * Builds the query required to \<i>delete\</i> a concrete
 * \<code><input.table_name>\</code> entity, determined by a foreign key.
 * @param queryFactory the \<code>QueryFactory\</code> instance,
 * @return the \<code>DeleteQuery\</code> instance.
 <precondition_notnull("queryFactory")>
 */
protected Query buildDeleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(
    final QueryFactory queryFactory)
{
    DeleteQuery result = queryFactory.createDeleteQuery();

    buildDeleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(result);

    return result;
}

/**
 * Builds the query required to \<i>delete\</i> a concrete
 * \<code><input.table_name>\</code> entity, determined by a foreign key.
 * @param query the query to initialize.
 <precondition_notnull("query")>
 */
protected void buildDeleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(
    final DeleteQuery query)
{
    query.deleteFrom(<input.table_name_uppercased>);

    <foreignKey.attributes:attribute_query_filter(
      tableRepositoryName=input.table_repository_name,
      tableNameUppercased=input.table_name_uppercased,
      nameUppercased=it.nameUppercased); separator="\n">
}

/**
 * Deletes <input.table_name> information from the persistence layer filtering
 * by given foreign keys.
 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
  separator="\n">
 */
public void deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">(
    <foreignKey.attributes:attribute_declaration(attr=it); separator=",\n">)
{
    deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">(
        <foreignKey.attributes:{<it.nameLowercased>}; separator=",\n">,
        buildDeleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(),
        getDataSource());
}

/**
 * Deletes <input.table_name> information from the persistence layer filtering
 * by given foreign keys.
 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
   separator="\n">
 * @param query the delete query.
 * @param dataSource the \<code>DataSource\<code> instance.
 <precondition_notnull("query")>
 <precondition_notnull("dataSource")>
 */
protected void deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                         separator="And">(
    <foreignKey.attributes:attribute_declaration(attr=it); separator=",\n">,
    final Query query,
    final DataSource dataSource)
{
    deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>};
              separator="And">(
        <foreignKey.attributes:{<it.nameLowercased>}; separator=",\n">,
        query,
        new DataSourceTransactionManager(dataSource));
}

/**
 * Deletes <input.table_name> information from the persistence layer filtering
 * by given foreign keys.
 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
  separator="\n">
 * @param query the delete query.
 * @param transactionManager the
 * \<code>PlaformTransactionManager\<code> instance.
 <precondition_notnull("query")>
 <precondition_notnull("transactionManager")>
 */
protected void deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                         separator="And">(
    <foreignKey.attributes:attribute_declaration(attr=it); separator=",\n">,
    final Query query,
    final PlatformTransactionManager transactionManager)
{
    // Enabling transactions temporarily.
    synchronized (DataSourceTransactionManager.class)
    {
        deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                  separator="And">(
            <foreignKey.attributes:{<it.nameLowercased>}; separator=",\n">,
            query,
            new TransactionTemplate(transactionManager));
    }
}

/**
 * Deletes <input.table_name> information from the persistence layer filtering
 * by given foreign keys.
 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
  separator="\n">
 * @param query the delete query.
 * @param transactionTemplate the \<code>TransactionTemplate\<code>
 * instance.
 <precondition_notnull("query")>
 <precondition_notnull("transactionTemplate")>
 */
protected void deleteBy<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                         separator="And">(
    <foreignKey.attributes:attribute_declaration(attr=it); separator=",\n">,
    final Query query,
    final TransactionTemplate transactionTemplate)
{
    transactionTemplate.execute(
        new UpdateTransactionCallback(
            new QueryPreparedStatementCreator(query),
            new <input.vo_name>By<foreignKey.targetVoName>StatementSetter(
                <foreignKey.attributes:{attr |<attr.nameLowercased>};
                  separator=",\n">),
            this));
}
<endif>

>>

fk_discard_relation_method(foreignKey,input) ::= <<
<!
 Writes the discardRelationToXXByYY method for a concrete foreign key.
 @param referringTable the referring table.
 @param map the table -> foreign_key map.
 @param input.table_name the table name.
!>
/**
 * Builds the query required to \<i>discard\</i> any relationship with a
 * concrete \<code><input.table_name>\</code> entity, identified by a
 * foreign key.
 * @return the \<code>DeleteQuery\</code> instance.
 */
protected Query buildDiscardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query()
{
    return
        buildDiscardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(
            QueryFactory.getInstance());
}

/**
 * Builds the query required to \<i>discard\</i> any relationship with a
 * concrete \<code><input.table_name>\</code> entity, identified by a
 * foreign key.
 * @param queryFactory the \<code>QueryFactory\</code> instance,
 * @return the \<code>DeleteQuery\</code> instance.
 <precondition_notnull("queryFactory")>
 */
protected Query buildDiscardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(
    final QueryFactory queryFactory)
{
    UpdateQuery result = queryFactory.createUpdateQuery();

    buildDiscardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(
        result);

    return result;
}

/**
 * Builds the query required to \<i>discard\</i> any relationship with a
 * concrete \<code><input.table_name>\</code> entity, identified by a
 * foreign key.
 * @param query the query to initialize.
 <precondition_notnull("query")>
 */
protected void buildDiscardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(
    final UpdateQuery query)
{
    query.update(<input.table_name_uppercased>);

    <foreignKey.attributes:{attr|query.set(<input.table_name_uppercased>.<attr.nameUppercased>, null);}; separator="\n">

    <foreignKey.attributes:attribute_query_filter(
      tableRepositoryName=input.table_repository_name,
      tableNameUppercased=input.table_name_uppercased,
      nameUppercased=it.nameUppercased); separator="\n">
}

/**
 * \<i>Discards\</i> any relationship with a
 * concrete \<code><input.table_name>\</code> entity, identified by a
 * foreign key.
 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
  separator="\n">
 */
public void discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                               separator="And">(
    <foreignKey.attributes:primitive_attribute_declaration(attr=it);
      separator=",\n">)
{
    discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                       separator="And">(
        <foreignKey.attributes:{<it.nameLowercased>}; separator=",\n">,
        buildDiscardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>}; separator="And">Query(),
        getDataSource());
}

/**
 * \<i>Discards\</i> any relationship with a
 * concrete \<code><input.table_name>\</code> entity, identified by a
 * foreign key.
 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
   separator="\n">
 * @param query the update query.
 * @param dataSource the \<code>DataSource\<code> instance.
 <precondition_notnull("query")>
 <precondition_notnull("dataSource")>
 */
protected void discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                                  separator="And">(
    <foreignKey.attributes:primitive_attribute_declaration(attr=it);
      separator=",\n">,
    final Query query,
    final DataSource dataSource)
{
    discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                       separator="And">(
        <foreignKey.attributes:{<it.nameLowercased>}; separator=",\n">,
        query,
        new DataSourceTransactionManager(dataSource));
}

/**
 * \<i>Discards\</i> any relationship with a
 * concrete \<code><input.table_name>\</code> entity, identified by a
 * foreign key.
 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
  separator="\n">
 * @param query the delete query.
 * @param transactionManager the
 * \<code>PlaformTransactionManager\<code> instance.
 <precondition_notnull("query")>
 <precondition_notnull("transactionManager")>
 */
protected void discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                                  separator="And">(
    <foreignKey.attributes:primitive_attribute_declaration(attr=it);
      separator=",\n">,
    final Query query,
    final PlatformTransactionManager transactionManager)
{
    // Enabling transactions temporarily.
    synchronized (DataSourceTransactionManager.class)
    {
        discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                           separator="And">(
            <foreignKey.attributes:{<it.nameLowercased>}; separator=",\n">,
            query,
            new TransactionTemplate(transactionManager));
    }
}

/**
 * \<i>Discards\</i> any relationship with a
 * concrete \<code><input.table_name>\</code> entity, identified by a
 * foreign key.
 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
  separator="\n">
 * @param query the delete query.
 * @param transactionTemplate the \<code>TransactionTemplate\<code>
 * instance.
 <precondition_notnull("query")>
 <precondition_notnull("transactionTemplate")>
 */
protected void discardRelationTo<foreignKey.targetVoName>By<foreignKey.attributes:{attr|<attr.nameCapitalized>};
                                  separator="And">(
    <foreignKey.attributes:primitive_attribute_declaration(attr=it);
      separator=",\n">,
    final Query query,
    final TransactionTemplate transactionTemplate)
{
    transactionTemplate.execute(
        new UpdateTransactionCallback(
            new QueryPreparedStatementCreator(query),
            new <input.vo_name>By<foreignKey.targetVoName>StatementSetter(
                <foreignKey.attributes:{attr |<attr.nameLowercased>};
                  separator=",\n">),
            this));
}
<endif>

>>

defaultInsert(input) ::= <<
<!
 Generates the default insert logic.
 @param input the input.
!>
<jdbcInsert(input=input)>
>>

jdbcInsert(input) ::= <<
<!
 Generates the JDBC insert logic.
 @param input the input.
 !>
/**
 * Builds the query required to \<i>insert\</i> a concrete
 * \<code><input.table_name>\</code> instance.
 * @return the \<code>InsertQuery\</code> instance.
 */
protected Query buildInsertQuery()
{
    return buildInsertQuery(QueryFactory.getInstance());
}

/**
 * Builds the query required to \<i>insert\</i> a concrete
 * \<code><input.table_name>\</code> instance.
 * @param queryFactory the \<code>QueryFactory\</code> instance.
 * @return the \<code>InsertQuery\</code> instance.
 <precondition_notnull("queryFactory")>
 */
protected Query buildInsertQuery(final QueryFactory queryFactory)
{
    InsertQuery result = queryFactory.createInsertQuery();

    buildInsertQuery(result);

    return result;
}

/**
 * Builds the query required to \<i>insert\</i> a concrete
 * \<code><input.vo_name>\</code> instance.
 * @param query the \<code>InsertQuery\</code> instance.
 <precondition_notnull("queryFactory")>
 */
protected void buildInsertQuery(final InsertQuery query)
{
    query.insertInto(<input.table_name_uppercased>);
    <input.attributes:attribute_query_insert(
      tableRepositoryName=input.tr_name_capitalized,
      tableNameUppercased=input.table_name_uppercased,
      nameUppercased=it.nameUppercased); separator="\n">
}

/**
 * Persists \<code><input.vo_name>\</code> information.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @throws DataAccessException if the operation fails.
 */
public void insert(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">)
  throws DataAccessException
{
    insert(
        <input.all_but_externally_managed_attributes:{<it.nameLowercased>}; separator=",\n">,
        buildInsertQuery(),
        getDataSource());
}

/**
 * Persists \<code><input.vo_name>\</code> information.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @param query the query to insert the values.
 * @param dataSource the \<code>DataSource\</code> instance.
 * @throws DataAccessException if the operation fails.
 <precondition_notnull("query")>
 <precondition_notnull("dataSource")>
 */
protected void insert(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">,
    final Query query,
    final DataSource dataSource)
  throws DataAccessException
{
    insert(
        <input.all_but_externally_managed_attributes:{<it.nameLowercased>}; separator=",\n">,
        query,
        new DataSourceTransactionManager(dataSource));
}

/**
 * Persists \<code><input.vo_name>\</code> information."
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @param query the query to insert the values.
 * @param transactionManager the \<code>PlatformTransactionManager\</code>
 * instance.
 * @throws DataAccessException if the operation fails.
 <precondition_notnull("query")>
 <precondition_notnull("transactionManager")>
 */
protected void insert(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">,
    final Query query,
    final PlatformTransactionManager transactionManager)
  throws DataAccessException
{
    // Enabling transactions temporarily.
    synchronized (DataSourceTransactionManager.class)
    {
        insert(
            <input.all_but_externally_managed_attributes:{<it.nameLowercased>}; separator=",\n">,
            query,
            new TransactionTemplate(transactionManager));
    }
}

/**
 * Persists \<code><input.vo_name>\</code> information.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @param query the query to insert the values.
 * @param transactionTemplate the \<code>TransactionTemplate\</code>
 * instance.
 * @throws DataAccessException if the operation fails.
 <precondition_notnull("query")>
 <precondition_notnull("transactionTemplate")>
 */
protected void insert(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">,
    final Query query,
    final TransactionTemplate transactionTemplate)
  throws DataAccessException
{
    Map t_mMap = null;

    <input.externally_managed_attributes:em_attribute_value_retrieval(
      query=it.query,
      nativeType=it.nativeType,
      nameLowercased=it.nameLowercased,
      type=it.objectType); separator="\n">

    transactionTemplate.execute(
        new UpdateTransactionCallback(
            new QueryPreparedStatementCreator(query),
            new <input.vo_name>AttributesStatementSetter(
                <input.attributes:{<it.nameLowercased>}; separator=",\n">,
                true),
            this));
}

/**
 * Inserts and retrieves the newly-inserted
 * \<code><input.vo_name>\</code> instance.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @throws DataAccessException if the operation fails.
 */
public <input.vo_name> create(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">)
  throws DataAccessException
{
    return
        create(
            <input.all_but_externally_managed_attributes:{<it.nameLowercased>}; separator=",\n">,
            buildInsertQuery(),
            getDataSource(),
            <input.vo_name>ValueObjectFactory.getInstance());
}

/**
 * Inserts and retrieves the newly-inserted
 * \<code><input.vo_name>\</code> instance."
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @param query the query required to insert given information.
 * @param dataSource the data source.
 * @param factory the \<code><input.vo_name>ValueObjectFactory\</code>
 * instance.
 * @throws DataAccessException if the operation fails.
 <precondition_notnull("query")>
 <precondition_notnull("dataSource")>
 <precondition_notnull("factory")>
 */
protected <input.vo_name> create(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">,
    final Query query,
    final DataSource dataSource,
    final <input.vo_name>ValueObjectFactory factory)
  throws DataAccessException
{
    return
        create(
            <input.all_but_externally_managed_attributes:{<it.nameLowercased>}; separator=",\n">,
            query,
            new DataSourceTransactionManager(dataSource),
            factory);
}

/**
 * Inserts and retrieves the newly-inserted
 * \<code><input.vo_name>\</code> instance."
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @param query the query required to insert given information.
 * @param transactionManager the \<code>PlatformTransactionManager\</code>
 * instance.
 * @param factory the \<code><input.vo_name>ValueObjectFactory\</code>
 * instance.
 * @throws DataAccessException if the operation fails.
 <precondition_notnull("query")>
 <precondition_notnull("transactionManager")>
 <precondition_notnull("factory")>
 */
protected <input.vo_name> create(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">,
    final Query query,
    final PlatformTransactionManager transactionManager,
    final <input.vo_name>ValueObjectFactory factory)
  throws DataAccessException
{
    return
        create(
            <input.all_but_externally_managed_attributes:{<it.nameLowercased>}; separator=",\n">,
            query,
            new TransactionTemplate(transactionManager),
            factory);
}

/**
 * Inserts and retrieves the newly-inserted
 * \<code><input.vo_name>\</code> instance.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @param query the query required to insert given information.
 * @param transactionTemplate the \<code>TransactionTemplate\<code>
 * instance.
 * @param factory the \<code><input.vo_name>ValueObjectFactory\</code>
 * instance.
 * @throws DataAccessException if the operation fails.
 <precondition_notnull("transactionTemplate")>
 <precondition_notnull("factory")>
 */
protected <input.vo_name> create(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">,
    final Query query,
    final TransactionTemplate transactionTemplate,
    final <input.vo_name>ValueObjectFactory factory)
  throws DataAccessException
{
    <input.vo_name> result = null;

    Map t_mMap = null;

    <input.externally_managed_attributes:em_attribute_value_retrieval(
      query=it.query,
      nativeType=it.nativeType,
      nameLowercased=it.nameLowercased,
      type=it.objectType); separator="\n">

    transactionTemplate.execute(
        new UpdateTransactionCallback(
            new QueryPreparedStatementCreator(query),
            new <input.vo_name>AttributesStatementSetter(
                <input.attributes:{<it.nameLowercased>}; separator=",\n">,
                true),
            this));

    result =
        factory.create<input.vo_name>(
            <input.attributes:{<it.nameLowercased>}; separator=",\n">);

    return result;
}
>>

oracleInsert(input) ::= <<
<!
  Generates the insert logic for Oracle.
  @param input the input.
!>
<oracle8Insert(input=input)>
>>

oracle8Insert(input) ::= <<
<!
  Generates the insert logic for Oracle8.
  @param input the input.
!>
/**
 * Persists \<code><input.vo_name>\</code> information.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @throws DataAccessException if the operation fails.
 */
public void insert(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">)
  throws DataAccessException
{
    create(
        <input.all_but_externally_managed_attributes:{<it.nameLowercased>};
          separator=",\n">);
}

/**
 * Persists \<code><input.vo_name>\</code> information.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @return the newly-inserted entity.
 * @throws DataAccessException if the operation fails.
 */
public <input.vo_name> create(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">)
  throws DataAccessException
{
    return
        create(
            <input.all_but_externally_managed_attributes:{<it.nameLowercased>};
              separator=",\n">,
            getDataSource());
}

/**
 * Persists \<code><input.vo_name>\</code> information.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @param dataSource the data source.
 * @return the newly-inserted entity.
 * @throws DataAccessException if the operation fails.
 * @precondition dataSource != null
 */
protected <input.vo_name> create(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">,
    final DataSource dataSource)
  throws DataAccessException
{
    return
        create(
            <input.all_but_externally_managed_attributes:{<it.nameLowercased>};
              separator=",\n">,
            new DataSourceTransactionManager(dataSource));
}

/**
 * Persists \<code><input.vo_name>\</code> information.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @param transactionManager the transaction manager.
 * @return the newly-inserted entity.
 * @throws DataAccessException if the operation fails.
 * @precondition transactionManager != null
 */
protected <input.vo_name> create(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">,
    final PlatformTransactionManager transactionManager)
  throws DataAccessException
{
    <input.vo_name> result = null;

    // Enabling transactions temporarily.
    synchronized (DataSourceTransactionManager.class)
    {
        result =
            create(
                <input.all_but_externally_managed_attributes:{<it.nameLowercased>};
                  separator=",\n">,
                new TransactionTemplate(transactionManager));
    }

    return result;
}

/**
 * Persists \<code><input.vo_name>\</code> information.
 <input.all_but_externally_managed_attributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
 * @param transactionTemplate the transaction template.
 * @return the newly-inserted entity.
 * @throws DataAccessException if the operation fails.
 */
protected <input.vo_name> create(
    <input.all_but_externally_managed_attributes:attribute_declaration(
      attr=it); separator=",\n">,
    final TransactionTemplate transactionTemplate)
  throws DataAccessException
{
    <input.vo_name> result = null;

    Map t_mMap = null;

    <input.externally_managed_attributes:em_attribute_value_retrieval(
      query=it.query,
      nativeType=it.nativeType,
      nameLowercased=it.nameLowercased,
      type=it.objectType); separator="\n">

    transactionTemplate.execute(
        new UpdateTransactionCallback(
            new QueryPreparedStatementCreator(
                "insert into <input.table_name_uppercased>" +
                " (" +
                <input.attributes:{"<it.nameUppercased>};
                  separator=", \" +\n">" +
                ") VALUES (" +
                <input.attributes:insert_attribute(attr=it);
                  separator=",\" +\n">)"),
            new <input.vo_name>AttributesStatementSetter(
                <input.all_but_lob_attributes:{<it.nameLowercased>};
                  separator=",\n">,
                false,
                true),
            this));

    SelectForUpdateTransactionCallback t_Callback =
        new SelectForUpdateTransactionCallback(
            new QueryPreparedStatementCreator(
                "SELECT " +
                <input.attributes:{"<it.nameUppercased>};
                  separator=", \" +\n">" +
                " FROM <input.table_name_uppercased>" +
                " WHERE " +
                <input.pk_attributes:{"<it.nameUppercased> = ?};
                  separator=" AND \" +\n">" +
                " FOR UPDATE"),
            new <input.vo_name>PkStatementSetter(
                <input.pk_attributes:{<it.nameLowercased>};
                  separator=",\n">),
            new <input.vo_name>ResultSetExtractor(
                <input.lob_attributes:{<it.nameLowercased>};
                  separator=",\n">,
                true),
            this);

    result = (<input.vo_name>) transactionTemplate.execute(t_Callback);

    //result = t_Callback.getResult();

    return result;
}
>>

insert_attribute(attr) ::= <<
<!
 Generates the insert part corresponding to given attribute.
 @param attr the attribute.
!>
<if(attr.clob)>
"EMPTY_CLOB()
<else>
"?
<endif>
>>

to_primitive(attr) ::= <<
<!
 Writes the code to convert given attribute to primitive.
 @param attr the attribute.
!>
<if(attr.primitive)>
<attr.nameLowercased>
<else>
<indirect_template(name=attr.objectType+"_to_primitive", input=attr)>
<endif>

>>
