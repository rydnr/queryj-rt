//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2005  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile: $
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate Repository DAO
//              implementations.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group RepositoryDAO;

source(input) ::= <<
<!
  Generates a repository DAO implementation source file.
  @param input.copyright_years the copyright's years.
  @param input.package the package.
  @param input.dao_class_name the DAO class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(repository=input.tr_name)
  ],
  timestamp=input.timestamp)>
<endif>

// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.engine_name_lowercased,
    input.subpackage_name
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  voSubpackageName=typeInitMap.voSubpackageName,
  repository=input.tr_name_capitalized,
  voName=input.vo_name)>

<customResults:resultset_extractor_import(
  basePackageName=basePackageName,
  baseDAOSubpackageName=baseDAOSubpackageName,
  rdbSubpackageName=rdbSubpackageName,
  subpackageName=subpackageName,
  crseIdCapitalized=it.idCapitalized); separator="\n">

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.queryj.dao.QueryjJdbcTemplate;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ParameterDisposer;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.object.SqlQuery;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.transaction.TransactionException;
import org.springframework.transaction.TransactionStatus;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Types;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(input=input)>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository.
!>
Defines the global queries defined for <repository>.
>>

project_imports(
  basePackageName,
  baseDAOSubpackageName,
  repository,
  voSubpackageName,
  voName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param baseDAOSubpackageName the BaseDAO subpackage name.
 @param voSubpackageName the value-object subpackage name.
 @param repository the repository.
 @param voName the value-object name.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<baseDAOSubpackageName>.<repository>DAO;
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
/**
 * <[
      first_line_description(repository=input.tr_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.engine_name><input.tr_name_capitalized>DAO
    extends     QueryjJdbcTemplate
    implements  <input.tr_name_capitalized>DAO
{
    <input.custom_results:resultset_extractor_constants(
      crseid=it.id,
      crseidCapitalized=it.idCapitalized,
      crseidNormalizedUppercased=it.idNormalizedUppercased); separator="\n\n">

    /**
     * Builds a \<code><input.class_name>\</code> instance
     * with given data source.
     * @param dataSource the required data source.
     <precondition_notnull("dataSource")>
     */
    public <input.engine_name><input.tr_name_capitalized>DAO(final DataSource dataSource)
    {
        super(dataSource);
    }

    <input.custom_selects:custom_select(
      cs=it, input=input); separator="\n">

    <input.custom_updates_or_inserts:custom_update_or_insert(
      cs=it, input=input); separator="\n">

    <input.custom_selects_for_update:custom_select_for_update(
      cs=it, input=input); separator="\n">

    <inner_transaction_callbacks(
      daoName=input.engine_name+input.tr_name_capitalized,
      clobHandling=input.clobHandling)>
}
>>
