//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2005  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile: $
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate CustomResultSetExtractors.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group CustomResultSetExtractor;

source(input) ::= <<
<!
  Generates a CustomResultSetExtractor source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(result=input.result),
    second_line_description(result=input.result)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.subpackage_name
  ])>

<project_imports(
  result=input.result,
  basePackageName=input.base_package_name,
  trSubpackageName=typeInitMap.tableRepositorySubpackageName,
  trName=input.tr_name_capitalized)>

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.queryj.QueryResultSet;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(result=input.result, input=input)>
>>

first_line_description(result) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the result.
!>
Extracts <result.id> instances
>>

second_line_description(result) ::= <<
<!
  Generates the second line of the generated file description.
  @param result the result.
!>
 from java.sql.ResultSets.
>>

project_imports(result, basePackageName, trSubpackageName, trName) ::= <<
<!
 Generates the project imports.
 @param result the result instance.
 @param basePackageName the base package name.
 @param trSubpackageName the table repository subpackage name.
 @param trName the table repository name.
!>
/*
 * Importing project classes.
 */
import <result.classValue>;
import <result.classValue>ValueObjectFactory;
import <basePackageName>.<trSubpackageName>.<trName>TableRepository;
>>

class(result, input) ::= <<
<!
 Generates the class body.
 @param result the result.
 @param input the input.
!>
/**
 * <[
      first_line_description(result=result),
      second_line_description(result=result)
    ]:{line |<line>}; separator="\n * ")>
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <result.idCapitalized>Extractor
    implements  ResultSetExtractor,
                <input.tr_name_capitalized>TableRepository
{
    // \<extract data\>
    /**
     * Extracts \<i><result.id>\</i> information from given result set.
     * @param resultSet the result set.
<if(result.multiple)>
     * @return the \<i><input.className>\</i> instances or \<code>null\</code>
     * if the operation returned no data.
<else>
     * @return the \<i><input.className>\</i> instance or \<code>null\</code>
     * if the operation returned no data.
<endif>

     * @throws SQLException intercepted by \<i>Spring\</i>.
     * @throws DataAccessException with information about any
     * custom exception.
     <precondition_notnull("resultSet")>
     */
    public Object extractData(final ResultSet resultSet)
        throws  SQLException,
                DataAccessException
    {
        return
            extractData(
                resultSet,
                <result.classValue>ValueObjectFactory.getInstance());
    }

    /**
     * Extracts \<i><result.id>\</i> information from given result set.
     * @param resultSet the result set.
     * @param factory the value object factory.
<if(result.multiple)>
     * @return the \<i><input.className>\</i> instances or \<code>null\</code>
     * if the operation returned no data.
<else>
     * @return the \<i><input.className>\</i> instance or \<code>null\</code>
     * if the operation returned no data.
<endif>
     * if the operation returned no data.
     * @throws SQLException intercepted by \<i>Spring\</i>.
     * @throws DataAccessException with information about any
     * custom exception.
     <precondition_notnull("resultSet")>
     */
    protected Object extractData(
        final ResultSet resultSet,
        final <result.classValue>ValueObjectFactory factory)
      throws  SQLException,
              DataAccessException
    {
<if(result.multiple)>
        Collection result = new ArrayList();
<else>
        <result.classValue> result = null;
<endif>


<if(result.multiple)>
        while  (resultSet.next())
<else>
        if  (resultSet.next())
<endif>

        {
            <result.properties:nullable_attribute_extraction(
              attr=it, input=input)>
            <result.lobProperties:special_attribute_extraction(
              attr=it, input=input)>

<if(result.multiple)>
            result.add(
<else>
            result =
<endif>

                factory.createValueObject(
                    <result.properties:attribute_extraction(
                      attr=it, input=input); separator=",\n">)<if(result.multiple)>)<endif>;
        }

        return result;
    }
}
>>
<<<<<<< .working
=======

nullable_attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract nullable attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(input.clobHandling)>
<indirect_template(
  name=input.clobHandling+"_nullable_attribute_extraction", input=attr)>
<else>
<default_nullable_attribute_extraction(attr=attr, input=input)>
<endif>
>>

default_nullable_attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract nullable attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(attr.allowsNull)>
<attr.objectType> t_<attr.columnNameNormalizedCapitalized>As<attr.objectType> =
<if(attr.primitive)>
<if(input.clobhandling)>
    <object_nullable_clobhandling_attribute_extractor(attr=attr)>
<else>
    <primitive_nullable_attribute_extractor(attr=attr)>
<endif>
<else>
<if(input.clobhandling)>
    <indirect_template(name=attr.objectType+"_nullable_clobhandling_attribute_extractor", input=attr)>
<else>
    <indirect_template(name=attr.objectType+"_nullable_attribute_extractor", input=attr)>
<endif>
<endif>

if  (resultSet.wasNull())
{
    t_<attr.columnNameNormalizedCapitalized>As<attr.objectType> = null;
}

<endif>
>>

String_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a String nullable attribute.
!>
<object_nullable_attribute_extractor(attr=input)>
>>

String_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a String nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Date_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Date nullable attribute.
!>
<object_nullable_attribute_extractor(attr=input)>
>>

Date_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Date nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Timestamp_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Timestamp nullable attribute.
!>
<object_nullable_attribute_extractor(attr=input)>
>>

Timestamp_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Timestamp nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

BigDecimal_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a BigDecimal nullable attribute.
!>
<object_nullable_attribute_extractor(attr=input)>
>>

BigDecimal_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a BigDecimal nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

primitive_nullable_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
new <attr.objectType>(
<if(attr.numberSmallerThanInt)>
    resultSet.getInt(
<else>
    resultSet.get<attr.objectType>(
<endif>

        "<attr.columnName>"));
>>

primitive_nullable_clobhandling_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
new <attr.objectType>(
<if(attr.numberSmallerThanInt)>
    resultSet.getInt("<attr.columnName>"));
<else>
    resultSet.get<attr.objectType>("<attr.columnName>"));
<endif>
>>

object_nullable_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a non-primitive nullable attribute.
!>
<if(attr.numberSmallerThanInt)>
    resultSet.getInt(
<else>
resultSet.get<attr.objectType>(
<endif>

    "<attr.columnName>");
>>

object_nullable_clobhandling_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a non-primitive nullable attribute.
!>
<if(attr.numberSmallerThanInt)>
resultSet.getInt("<attr.columnName>");
<else>
resultSet.get<attr.objectType>("<attr.columnName>");
<endif>
>>

attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(input.clobHandling)>
<indirect_template(
  name=input.clobHandling+"_attribute_extraction", input=attr)>
<else>
<default_attribute_extraction(attr)>
<endif>
>>

default_attribute_extraction(attr) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param attr the attribute.
!>
<if(attr.allowsNull)>
t_<attr.columnNameNormalizedCapitalized>As<attr.objectType>
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt("<attr.columnName>")
<else>
resultSet.get<attr.objectType>("<attr.columnName>")
<endif>
<endif>
>>

default_clobhandling_attribute_extraction(attr) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param attr the attribute.
!>
<if(attr.allowsNull)>
t_<attr.columnNameNormalizedCapitalized>As<attr.objectType>
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt("<attr.columnName>")
<else>
resultSet.get<attr.objectType>("<attr.columnName>")
<endif>
<endif>
>>

special_attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract special attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(input.clobHandling)>
<indirect_template(
  name=input.clobHandling+"_special_attribute_extraction", input=attr)>
<endif>
>>
