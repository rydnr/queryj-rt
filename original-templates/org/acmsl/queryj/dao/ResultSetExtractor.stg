//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2005  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile$
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate ResultSetExtractors.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group ResultSetExtractor;

source(input) ::= <<
<!
  Generates a ResultSetExtractor source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(tableName=input.table_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.subpackage_name,
    input.table_name_normalized_lowercased
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=input.vo_name,
  trSubpackageName=typeInitMap.tableRepositorySubpackageName,
  trName=input.tr_name_capitalized)>

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.queryj.QueryResultSet;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(input=input)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Extracts <tableName> entities from ResultSets.
>>

project_imports(
  basePackageName, voSubpackageName, voName, trSubpackageName, trName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param voSubpackageName the value-object subpackage name.
 @param voName the value-object name.
 @param trSubpackageName the table repository subpackage name.
 @param trName the table repository name.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<voSubpackageName>.<voName>;
import <basePackageName>.<voSubpackageName>.<voName>ValueObjectFactory;
import <basePackageName>.<trSubpackageName>.<trName>TableRepository;
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
/**
 * <[
      first_line_description(tableName=input.table_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.vo_name>ResultSetExtractor
    implements  ResultSetExtractor,
                <input.tr_name_capitalized>TableRepository
{
<if(input.lobHandling)>
    <indirect_template(name=input.lobHandling+"Extractor", input=input)>
<else>
    <defaultExtractor(input=input)>
<endif>

}
>>

defaultExtractor(input) ::= <<
<!
 Generates the default logic for the extractor.
 @param input the input.
!>
/**
 * Extracts \<i><input.vo_name>\</i> information from given result set.
 * @param resultSet the result set.
 * @return the \<code><input.vo_name>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_notnull("resultSet")>
 <precondition_instanceof(name="resultSet", className="QueryResultSet")>
 */
public Object extractData(final ResultSet resultSet)
    throws  SQLException,
            DataAccessException
{
    return
        extractData(
            (QueryResultSet) resultSet,
            <input.vo_name>ValueObjectFactory.getInstance());
}

/**
 * Extracts \<i><input.vo_name>\</i> information from given result set.
 * @param resultSet the result set.
 * @param factory the \<code><input.vo_name>ValueObjectFactory\</code>
 * instance.
 * @return the \<code><input.vo_name>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_notnull("resultSet")>
 <precondition_notnull("factory")>
 */
protected <input.vo_name> extractData(
    final QueryResultSet resultSet,
    final <input.vo_name>ValueObjectFactory factory)
  throws  SQLException,
          DataAccessException
{
    <input.vo_name> result = null;

    if  (resultSet.next())
    {
        <input.attributes:nullable_attribute_extraction(
          attr=it, input=input)>

        result =
            factory.create<input.vo_name>ValueObject(
                <input.attributes:attribute_extraction(attr=it);
                  separator=",\n">);
    }

    return result;
}
>>

oracleExtractor(input) ::= <<
<!
 Generates the constructor needed by Oracle LOB management.
 @param input the input.
!>
<oracle8Extractor(input=input)>
>>

oracle8Extractor(input) ::= <<
<!
 Generates the constructor needed by Oracle8 LOB management.
 @param input the input.
!>
<input.lob_attributes:attribute_class_declaration(attr=it);
  separator="\n\n">

/**
 * The \<i>select for update\</i> mode.
 */
private boolean m__bSelectForUpdateMode;

/**
 * Creates a Oracle-based \<code>ResultSetExtractor\</code>
 * to extract <input.vo_name> information, managing LOB stuff.
 * @param selectForUpdateMode whether the result set is the result of
 * the \<i>select for update\</code> (required to perform some operations
 * such as \<b>insert\</b>s), or not.
 */
protected <input.vo_name>ResultSetExtractor(
    final boolean selectForUpdateMode)
{
    immutableSetSelectForUpdateMode(selectForUpdateMode);
}

/**
 * Creates a Oracle-based \<code>ResultSetExtractor\</code>
 * to extract <input.vo_name> information, managing LOB stuff.
 <input.lob_attributes:attribute_javadoc_method_declaration(attr=it);
   separator=",\n">
 * @param selectForUpdateMode whether the result set is the result of
 * the \<i>select for update\</code> (required to perform some operations
 * such as \<b>insert\</b>s), or not.
 */
public <input.vo_name>ResultSetExtractor(
    <input.lob_attributes:attribute_method_declaration(attr=it);
      separator=",\n">,
    final boolean selectForUpdateMode)
{
    this(selectForUpdateMode);
    <input.lob_attributes:attribute_setter_call(attr=it); separator="\n">
}

/**
 * Creates a Oracle-based \<code>ResultSetExtractor\</code>
 * to extract <input.vo_name> information, managing LOB stuff.
 */
public <input.vo_name>ResultSetExtractor()
{
    this(false);
}

<input.lob_attributes:attribute_accessors(attr=it); separator="\n\n">

/**
 * Specifies whether the extractor is retrieving results of a
 * \<i>select for update\</i> or not.
 * @param selectForUpdate such behaviour.
 */
protected final void immutableSetSelectForUpdateMode(
    final boolean selectForUpdateMode)
{
    m__bSelectForUpdateMode = selectForUpdateMode;
}

/**
 * Specifies whether the extractor is retrieving results of a
 * \<i>select for update\</i> or not.
 * @param selectForUpdate such behaviour.
 */
protected void setSelectForUpdateMode(final boolean selectForUpdateMode)
{
    immutableSetSelectForUpdateMode(selectForUpdateMode);
}

/**
 * Retrieves whether the extractor is retrieving results of a
 * \<i>select for update\</i> or not.
 * @return such behaviour.
 */
public boolean getSelectForUpdateMode()
{
    return m__bSelectForUpdateMode;
}

/**
 * Extracts \<i><input.vo_name>\</i> information from given result set.
 * @param resultSet the result set.
 * @return the \<code><input.vo_name>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_instanceof(name="resultSet", className="QueryResultSet")>
 */
public Object extractData(final ResultSet resultSet)
    throws  SQLException,
            DataAccessException
{
    return
        extractData(
            resultSet,
            <input.lob_attributes:{get<it.nameCapitalized>()};
              separator=",\n">,
            getSelectForUpdateMode(),
            <input.vo_name>ValueObjectFactory.getInstance());
}

/**
 * Extracts \<i><input.vo_name>\</i> information from given result set.
 * @param resultSet the result set.
 <input.lob_attributes:attribute_javadoc_method_declaration(attr=it);
   separator="\n">
 * @param selectForUpdate whether the operation is a
 * \<i>select for update\</i>.
 * @param factory the \<code><input.vo_name>ValueObjectFactory\</code>
 * instance.
 * @return the \<code><input.vo_name>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_notnull("resultSet")>
 <precondition_notnull("factory")>
 */
protected Object extractData(
    final ResultSet resultSet,
    <input.lob_attributes:attribute_method_declaration(attr=it);
      separator=",\n">,
    final boolean selectForUpdateMode,
    final <input.vo_name>ValueObjectFactory factory)
  throws  SQLException,
          DataAccessException
{
    <input.vo_name> result = null;

    if  (resultSet.next())
    {
        <input.attributes:nullable_attribute_extraction(
          attr=it, input=input)>
        <input.lob_attributes:special_attribute_extraction(
          attr=it, input=input)>

        result =
            factory.create<input.vo_name>ValueObject(
                <input.attributes:attribute_extraction(
                  attr=it, input=input); separator=",\n">);
    }

    return result;
}

>>

attribute_class_declaration(attr) ::= <<
<!
 Generates the attribute class declaration.
 @param attr the attribute.
!>
/**
 * The <attr.name> attribute.
 */
private <attr.objectType> m__<attr.nameCapitalized>;
>>

attribute_javadoc_method_declaration(attr) ::= <<
<!
 Generates the attribute Javadoc method declaration.
 @param attr the attribute.
!>
* @param <attr.nameLowercased> the \<i><attr.name>\</i> information.
>>

attribute_method_declaration(attr) ::= <<
<!
 Generates the attribute method declaration.
 @param attr the attribute.
!>
final <attr.objectType> <attr.nameLowercased>
>>

attribute_setter_call(attr) ::= <<
<!
 Generates the attribute setter call.
 @param attr the attribute.
!>
immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);
>>

attribute_accessors(attr) ::= <<
<!
 Generates the attribute accessors.
 @param attr the attribute.
!>
/**
 * Specifies the \<i><attr.name>\</i> information.
 * @param <attr.nameLowercased> such value.
 */
protected final void immutableSet<attr.nameCapitalized>(
    final <attr.objectType> <attr.nameLowercased>)
{
    m__<attr.nameCapitalized> = <attr.nameLowercased>;
}

/**
 * Specifies the \<i><attr.name>\</i> information.
 * @param <attr.nameLowercased> such value.
 */
protected void set<attr.nameCapitalized>(
    final <attr.objectType> <attr.nameLowercased>)
{
    immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);
}

/**
 * Specifies the \<i><attr.name>\</i> information.
 * @param <attr.nameLowercased> such value.
 */
public <attr.objectType> get<attr.nameCapitalized>()
{
    return m__<attr.nameCapitalized>;
}
>>
