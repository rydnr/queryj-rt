//;-*- mode: java-*-
/*
                        NLP-Games

   Copyright (C) 2006 Ventura24 S.L.

   License details are included in Ventura24 license file.
 */
// Generated by $Id: DAOFactory.stg 2534 2009-04-29 14:53:11Z jjuan $

package com.ventura24.nlp.games.dao.rdb.oracle;

/*
 * Importing project-specific classes.
 */
import com.ventura24.nlp.games.dao.rdb.GamesDAOListener;
import com.ventura24.nlp.games.dao.rdb.GamesDAOListenerImpl;
import com.ventura24.nlp.games.dao.GClubDAO;
import com.ventura24.nlp.games.dao.GClubDAOFactory;
import com.ventura24.nlp.games.dao.rdb.oracle.OracleGClubDAO;
import com.ventura24.nlp.games.dao.rdb.GamesJndiUtils;
//import com.ventura24.nlp.games.dao.rdb.GamesThreadAwareDataSourceWrapper;


/*
 * Importing some Spring classes.
 */
import org.springframework.jdbc.CannotGetJdbcConnectionException;
//import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;

/*
 * Importing some extension classes.
 */
import javax.sql.DataSource;

/*
 * Importing some commons-logging classes.
 */
import org.apache.commons.logging.LogFactory;

/**
 * Is able to create  instances according to
 * information in the Oracle-based persistence domain.
 * @author <a href="http://www.acm-sl.org/queryj">QueryJ</a>
 * @version $Revision: $ ($Author: $ at $Date: $)
 * @since 13:07:45.651 2013/11/07
 */
public class OracleGClubDAOFactory
    extends  GClubDAOFactory
{
    /**
     * The data source JNDI location.
     */
    public static final String JNDI_LOCATION = "java:comp/env/jdbc/nlp";

    /**
     * Singleton implemented to avoid the
     * <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#dcl"
     * >double-checked locking</a>.
     */
    private static class OracleGClubDAOFactorySingletonContainer
    {
        /**
         * The concrete singleton instance.
         */
        public static final OracleGClubDAOFactory SINGLETON =
            new OracleGClubDAOFactory();
    }

    /**
     * Public constructor to allow reflective instantiation.
     */
    public OracleGClubDAOFactory() {};

    /**
     * Retrieves a <code>OracleGClubDAOFactory</code>
     * instance.
     * @return such instance.
     */
    public static OracleGClubDAOFactory getOracleInstance()
    {
        return OracleGClubDAOFactorySingletonContainer.SINGLETON;
    }

    /**
     * Creates Oracle-specific G_CLUBS DAO.
     * @return such DAO.
     */
    public GClubDAO createGClubDAO()
    {
        return createGClubDAO(getDataSource());
    }

    /**
     * Creates Oracle-specific G_CLUBS DAO
     * using given data source.
     * @param dataSource the data source.
     * @return such DAO.
     * @precondition dataSource != null
     */
    protected GClubDAO createGClubDAO(final DataSource dataSource)
    {
        GClubDAO result = null;

        if  (dataSource != null)
        {
            result =
                new OracleGClubDAO(
                    dataSource,
                    null);
                    //new GamesDAOListenerImpl());
        }

        return result;
    }

    /**
     * Retrieves the data source.
     * @return such data source.
     */
    protected DataSource getDataSource()
    {
        return getDataSource(GamesJndiUtils.getInstance());
    }

    /**
     * Retrieves the data source.
     * @param jndiUtils the <code>GamesJndiUtils</code> instance.
     * @return such data source.
     * @precondition jndiUtils != null
     */
    protected DataSource getDataSource(final GamesJndiUtils jndiUtils)
    {
        DataSource result = null;

        try
        {
            result = jndiUtils.getDataSourceFromJndi(JNDI_LOCATION);
        }
        catch  (final CannotGetJdbcConnectionException cannotGetJdbcConnection)
        {
            // Assuming JNDI not available. The only way to retrieve
            // the DataSource is reduced to transactional (thread-based)
            // operations.
            try
            {
                LogFactory.getLog(OracleGClubDAO.class).info(
                      "DataSource not present in JNDI context. "
                    + "Assuming JNDI is not enabled.");
            }
            catch  (final Throwable throwable)
            {
                // Class loading problem.
            }
        }

//        if  (result == null)
//        {
////            result = new GamesThreadAwareDataSourceWrapper();
//        }
//        else
//        {
//            try
//            {
////                result = new GamesThreadAwareDataSourceWrapper(result);
//                result = new TransactionAwareDataSourceProxy(result);
//            }
//            catch  (final CannotGetJdbcConnectionException exception)
//            {
//                try
//                {
//                    LogFactory.getLog(OracleGClubDAO.class).error(
//                        "Cannot retrieve connection", exception);
//                }
//                catch  (final Throwable throwable)
//                {
//                    // class-loading problem.
//                }
//            }
//            catch  (final Throwable throwable)
//            {
//                try
//                {
//                    LogFactory.getLog(OracleGClubDAO.class).error(
//                        "Cannot retrieve data source", throwable);
//                }
//                catch  (final Throwable anotherThrowable)
//                {
//                    // class-loading problem.
//                }
//            }
//        }

        return result;
    }
}
