/*
                  QueryJ's Template Packaging

    Copyright (C) 20022014-today Jose San Leandro Armendariz
                              queryj@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: jose.sanleandro@acm-sl.com
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecabanas
                    Boadilla del monte
                    28660 Madrid
                    Spain

 ******************************************************************************
 *
 * Author: QueryJ's Template Packaging 3.0-SNAPSHOT
 *
 * Filename: PerForeignKeyTemplatesTestTemplateWritingHandler.java
 *
 * Description: Writing handler for PerForeignKeyTemplatesTestTemplates.
 *
 * Generated by QueryJ Template Packaging's 3.0-SNAPSHOT
 * org/acmsl/queryj/templates/packaging/PerForeignKeyTemplateWritingHandler.stg
 *
 * DO NOT MODIFY THIS CLASS MANUALLY, SINCE IT GETS GENERATED AUTOMATICALLY.
 * EITHER MODIFY org/acmsl/queryj/templates/packaging/PerForeignKeyTemplateWritingHandler.stg
 * OR CREATE AND APPLY A PATCH.
 */
package org.acmsl.queryj.templates.packaging.handlers;

/*
 * Importing QueryJ Core classes.
 */
import org.acmsl.queryj.api.PerForeignKeyTemplateContext;
import org.acmsl.queryj.api.handlers.BasePerForeignKeyTemplateWritingHandler;
import org.acmsl.queryj.metadata.engines.Engine;
import org.acmsl.queryj.QueryJCommand;
import org.acmsl.queryj.QueryJCommandWrapper;

/*
 * Importing QueryJ Template Packaging classes.
 */
import org.acmsl.queryj.templates.packaging.GlobalTemplateContext;
import org.acmsl.queryj.templates.packaging.PerForeignKeyTemplatesTestTemplate;

/*
 * Importing some JetBrains annotations.
 */
import org.acmsl.queryj.templates.packaging.PerTableTemplatesTestTemplate;
import org.acmsl.queryj.templates.packaging.TemplatePackagingTemplateGenerator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/*
 * Importing checkthread.org annotations.
 */
import org.checkthread.annotations.ThreadSafe;

/*
 * Importing JDK classes.
 */
import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * Writing handler for {@link PerForeignKeyTemplatesTestTemplate}s.
 * @author <a href="http://www.acm-sl.org/projects/queryj">QueryJ's Template Packaging 3.0-SNAPSHOT</a>
 * Generation template: org/acmsl/templates/packaging/TemplateWritingHandler.stg

 */
@ThreadSafe
public class PerForeignKeyTemplatesTestTemplateWritingHandler
    extends TemplatePackagingTestWritingHandler
                <PerForeignKeyTemplatesTestTemplate,
                    GlobalTemplateContext,
                    TemplatePackagingTemplateGenerator<PerForeignKeyTemplatesTestTemplate, GlobalTemplateContext>>
{
    /**
     * Creates a new writing handler for {@link PerForeignKeyTemplatesTestTemplate templates}.
     */
    public PerForeignKeyTemplatesTestTemplateWritingHandler() {}

    /**
     * {@inheritDoc}
     */
    @NotNull
    @Override
    protected PerForeignKeyTemplatesTestTemplateGenerator retrieveTemplateGenerator(final boolean caching, final int threadCount)
    {
        return new PerForeignKeyTemplatesTestTemplateGenerator(caching, threadCount);
    }

    /**
     * {@inheritDoc}
     */
    @NotNull
    @Override
    protected List<PerForeignKeyTemplatesTestTemplate> retrieveTemplates(@NotNull final QueryJCommand parameters)
    {
        @NotNull final List<PerForeignKeyTemplatesTestTemplate> result;

        @Nullable final List<PerForeignKeyTemplatesTestTemplate> aux =
            new QueryJCommandWrapper<List<PerForeignKeyTemplatesTestTemplate>>(parameters)
                .getSetting(PerForeignKeyTemplatesTestTemplateBuildHandler.TEMPLATES_KEY);

        if (aux == null)
        {
            result = new ArrayList<>(0);
        }
        else
        {
            result = aux;
        }

        return result;
    }

    /**
     * Retrieves the output dir from the attribute map.
     * @param engine the engine.
     * @param projectOutputDir the project output dir.
     * @param projectPackage the project package.
     * @param tableName the source table name.
     * @param subFolders whether to use sub folders or not.
     * @return such folder.
     */
    @NotNull
    @Override
    protected File retrieveOutputDir(
        @NotNull final Engine<String> engine,
        @NotNull final File projectOutputDir,
        final String projectPackage,
        @NotNull final String tableName,
        final boolean subFolders)
    {
        @NotNull final File result;

        @NotNull final String packageName =
            PerForeignKeyTemplatesTestTemplateBuildHandler.buildPackageName(
                tableName, engine, projectPackage);

        @NotNull final String[] pieces = packageName.split("\\.");

        @NotNull final StringBuilder aux = new StringBuilder();

        for (@NotNull final String piece : pieces)
        {
            aux.append(File.separator);
            aux.append(piece);
        }

        result = new File(projectOutputDir.getAbsolutePath() + aux.toString());

        return result;
    }
}
