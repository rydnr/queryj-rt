//;-*- mode: antlr -*-
//
//                      QueryJ Template Packaging
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: PerForeignKeyTemplatesFeature.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate PerForeignKeyTemplates.feature
//              Cucumber tests
//
group PerForeignKeyTemplatesFeature;

import "common.stg"

source(C) ::= <<
<!
  Generates PerForeignKeyTemplates.feature files.
!>
<sourceImpl(fk=C.foreignKey, C=C)>
>>
sourceImpl(fk, C) ::= <<
<!
  Generates PerForeignKeyTemplates.feature files.
!>
Feature: <fk.sourceTableName> foreign keys code compiles

  Scenario Outline: Templates bound to <fk.sourceTableName>' foreign keys compile

    Given the table containing the foreign key is:
    |    table     | parent table | decorated | relationship |   static    |
    | <fk.sourceTable.name> | <fk.sourceTable.parent> | <fk.sourceTable.decorated> | <fk.sourceTabel.relationship> | <fk.sourceTable.static> |

    And the table containing the foreign key has the following columns:
    |     table    |         column        | type      | pk    | allows null | readonly |   sequence    | keyword | boolean | length | precision |
    <fk.sourceTable.primaryKey:{ a |<cucumber_pk_declaration(attribute=a)>}; separator="\n">
    <fk.sourceTable.own.minus.primaryKey:{ a |<cucumber_nonpk_declaration(attribute=a)>}; separator="\n">

    And the following foreign keys:
    | source table | source columns | target table | allows null |
    | g_draws      | g_draw_type_id | d_draw_types | false       |

    And the following queries:
      |       id      |     name      |     dao      |  type  | matches  |                        value                           | validate |
      | first.select  | first-select  | g_draws      | select | single   | select * from g_draws where g_draw_id = ?              |   true   |
      | second.select | second-select | g_draws      | select | multiple | select * from g_draws where drawing_date > sysdate - 7 |   true   |
      | third.select  | third-select  | g_draw_types | select | multiple | select * from g_draw_types where description like ?    |   true   |
      | fourth.select | fourth-select | g_draws      | select | multiple | select * from g_draws where drawing_date = ?           |   true   |

    And the following query parameters:
      |            id            |     sql       | index |  type  |     name    | validation-value |
      | g_draws.g_draw_id        | first.select  |   1   |  long  | drawId      |         1        |
      | g_draw_types.description | third.select  |   1   | String | description |  'Euromillones'  |
      | g_draws.drawing_date     | fourth.select |   1   |  Date  | drawingDate |   '2014/02/15'   |

    And the following contents:
      |    table     |         row          |
      | g_draw_types | 1, "Euromillions", 1 |
      | g_draw_types | 2, "El_Gordo",     1 |
      | g_draw_types | 3, "Primitiva",    1 |

    When I generate with per-table \<template>.stg for Oracle

    Then the generated per-table \<output> file compiles successfully

    Then the queries are validated correctly using the following database:
      |     driver     |     url     |     userName     |     password     |
      | <C.jdbcDriver> | <C.jdbcUrl> | <C.jdbcUserName> | <C.jdbcPassword> |

    Examples:
      | template           | output                            |
      <C.templateDefs:{ d | <indirect_template(def=d, engineName="Oracle", tableName="User")>}; separator="\n">
>>

indirect_template(def, engineName, tableName) ::= <<
| <def.name; format="%-30s"> | <(def.filenameRule)(engineName, tableName)> |
>>

cucumber_nonpk_declaration(attribute) ::= <<
<! Declares the attribute metadata in Cucumber format !>
| <attribute.table.name> | <attribute.name> | <attribute.type> | false | <attribute.nullable> | <attribute.readOnly> | <attribute.sequence> | <attribute.keyword> | <attribute.boolean> | <attribute.length> | <attribute.precision> |
>>

cucumber_pk_declaration(attribute) ::= <<
<! Declares the attribute metadata in Cucumber format !>
| <attribute.table.name> | <attribute.name> | <attribute.type> | true | <attribute.nullable> | <attribute.readOnly> | <attribute.sequence> | <attribute.keyword> | <attribute.boolean> | <attribute.length> | <attribute.precision> |
>>