//;-*- mode: stringtemplate -*-
//
//                   QueryJ's Template Packaging
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: PerCustomResultTemplateFactory.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate QueryJ's per custom result
//              template factories.
//
group PerCustomResultTemplateFactory;

import "common.stg"

source(C) ::= <<
<!
 Generates a per-custom result TemplateFactory source file.
 @param C the context.
 !>
<sourceImpl(def=C.templateDef, C=C)>
>>

sourceImpl(def, C) ::= <<
<!
  Generates a per-custom result TemplateFactory source file.
  @param def the template def.
  @param C the context.
!>
<java_header(
  description=[ "Factory for ", def.name.capitalized, "Templates." ],
  description_oneline=true,
  filename=C.class_name,
  template="org/acmsl/queryj/templates/packaging/PerCustomResultTemplateFactory.stg",
  C=C)>
<package_declaration(packageName="org.acmsl.queryj.templates")>

/*
 * Importing QueryJ-Core classes.
 */
import org.acmsl.queryj.QueryJCommand;
import org.acmsl.queryj.QueryJCommandWrapper;
import org.acmsl.queryj.api.<def.type.capitalized>TemplateContext;
import org.acmsl.queryj.api.<def.type.capitalized>TemplateFactory;
import org.acmsl.queryj.customsql.CustomSqlProvider;
import org.acmsl.queryj.customsql.Property;
import org.acmsl.queryj.customsql.Result;
import org.acmsl.queryj.metadata.CachingResultDecorator;
import org.acmsl.queryj.Literals;
import org.acmsl.queryj.metadata.DecoratorFactory;
import org.acmsl.queryj.metadata.engines.EngineDecorator;
import org.acmsl.queryj.metadata.MetadataManager;

/*
 * Importing some ACM-SL Java Commons classes.
 */
import org.acmsl.commons.patterns.Singleton;

/*
 * Importing StringTemplate classes.
 */
import org.stringtemplate.v4.ST;

/*
 * Importing some JetBrains annotations.
 */
import org.jetbrains.annotations.NotNull;

/*
 * Importing checkthread.org annotations.
 */
import org.checkthread.annotations.ThreadSafe;

/*
 * Importing JDK classes.
 */
import java.util.List;

<class(def=def, C=C)>
>>

class(def, C) ::= <<
/**
 * Factory for {@link <def.name.noExtension>Template}s.
<class_common_javadoc(
  template="org/acmsl/queryj/templates/packaging/PerCustomResultTemplateFactory.stg",
  timestamp=C.timestamp,
  version=C.version)>
 */
@ThreadSafe
public class <C.class_name>
    implements <def.type.capitalized>TemplateFactory\<
               <def.name.noExtension>Template, <def.type.capitalized>TemplateContext>,
               Singleton
{
    /**
     * Singleton instance to avoid double-locking check.
     */
    protected static final class <C.class_name>SingletonContainer
    {
        /**
         * The actual singleton.
         */
        public static final <C.class_name> SINGLETON = new <C.class_name>();
    }

    /**
     * Retrieves the singleton instance.
     * @return such instance.
     */
    @NotNull
    public static <C.class_name> getInstance()
    {
        return <C.class_name>SingletonContainer.SINGLETON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @NotNull
    public <def.name.noExtension>Template createTemplate(
        @NotNull final Result\<String> customResult,
        @NotNull final List\<Property\<String\>> properties,
        @NotNull final QueryJCommand command)
    {
        @NotNull final <def.type.capitalized>TemplateContext t_Context =
            new <def.type.capitalized>TemplateContext(customResult, properties, command);

        @NotNull final String t_strFileName =
            retrieveTemplateFileName(
                customResult,
                t_Context.getCustomSqlProvider(),
                t_Context.getMetadataManager(),
                t_Context.getDecoratorFactory());

        t_Context.setFileName(t_strFileName);

        return new <def.name.noExtension>Template(t_Context);
    }

    /**
     * Retrieves the file name of the template.
     * @param customResult the custom result.
     * @param metadataManager the {@link MetadataManager} instance.
     * @return the file name.
     */
    @NotNull
    public String retrieveTemplateFileName(
        @NotNull final Result\<String> customResult,
        @NotNull final CustomSqlProvider customSqlProvider,
        @NotNull final MetadataManager metadataManager,
        @NotNull final DecoratorFactory decoratorFactory)
    {
        @NotNull final String result;

        @NotNull final ST template =
            new ST("<def.filenameBuilder>");

        template.add(
            Literals.RESULT,
            new CachingResultDecorator(
                customResult,
                customSqlProvider,
                metadataManager,
                decoratorFactory));

        template.add(Literals.NOTHING, new DecoratedString(""));
        template.add(Literals.ENGINE, new EngineDecorator(metadataManager.getEngine()));

        result = template.render();

        return result;
    }
}
>>