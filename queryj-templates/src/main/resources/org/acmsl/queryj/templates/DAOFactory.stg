//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAOFactory.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAOFactory implementations.
//
group DAOFactory;

import "queryj.stg"

source(C) ::= <<
<!
  Generates a DAOFactory database implementation source file.
!>
<sourceImpl(table=C.table, C=C)>
>>

sourceImpl(table, C) ::= <<
<!
  Generates a DAOFactory database implementation source file.
  @param table the table.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(tableName=table.name)
  ],
  template="org/acmsl/queryj/dao/DAOFactory.stg",
  C=C)><endif>
*/
<package_declaration(p=C.package)>

/*
 * Importing V24-Commons classes.
 */
import com.ventura24.commons.dao.DAOListener;
import com.ventura24.commons.dao.DAOListenerImpl;
import com.ventura24.commons.dao.JndiUtils;

/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.CannotGetJdbcConnectionException;

/*
 * Importing javax classes.
 */
import javax.sql.DataSource;

/*
 * Importing Apache Commons Logging classes.
 */
import org.apache.commons.logging.LogFactory;
<checkers_import(C=C)>
<class(table=table, C=C)>
>>

project_imports(
  basePackageName,
  package,
  jdbcOperationsSubpackageName,
  customResults,
  voSubpackageName,
  voName,
  voFactorySubpackageName,
  rdbSubpackageName,
  trSubpackageName,
  trName,
  damSubpackageName,
  fkssSubpackageName,
  fkAttributes,
  baseDAOSubpackageName,
  table,
  parent) ::= <<
<!
  Generates the project imports
  @param basePackageName the base package name.
  @param package the package.
  @param jdbcOperationsSubpackageName the subpackage for the JDBC operations.
  @param customResults the results of the custom queries.
  @param voSubpackageName the subpackage for the value
  @param voName the class name of the value-object.
  @param voFactorySubpackageName the subpackage of the value object factories.
  @param rdbSubpackageName the subpackage common of all RDBMs implementations.
  @param trSubpackageName the subpackage of the table repository.
  @param trName the name of the table repository.
  @param damSubpackageName the subpackage of the DataAccessManager.
  @param fkssSubpackageName the subpackage of the foreign key attribute
  statement setter.
  @param fkAttributes the foreign key attributes.
  @param baseDAOSubpackageName the subpackage of the base DAO interface.
  @param table the table.
  @param parent the parent table (optional).
!>
/*
 * Importing <trName> classes.
 */
import <package>.<table.name.voName>AttributesStatementSetter;
import <package>.<table.name.voName>PkStatementSetter;
import <package>.<table.name.voName>ResultSetExtractor;
import <basePackageName>.<voSubpackageName>.<table.name.voName>;
<if(parent)>
import <basePackageName>.<baseDAOSubpackageName>.<parent.name.voName>DAO;
import <basePackageName>.<voSubpackageName>.<parent.name.voName>;
<endif>
<if(table.voDecorated)>
import <basePackageName>.<voSubpackageName>.<table.name.voName>Decorator;
<endif>
import <basePackageName>.<voFactorySubpackageName>.<table.name.voName>ValueObjectFactory;
import <basePackageName>.<baseDAOSubpackageName>.<table.name.voName>DAO;
import <basePackageName>.<damSubpackageName>.<trName>DataAccessManager;
>>

description(tableName) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
!>
<tableName>-specific DAOFactory implementation.
>>

class(table, C) ::= <<
<!
 Generates the interface body.
 @param table the table.
 @param C the context.
!>
<classImpl(table=table, repository=C.repository, C=C)>
>>

classImpl(table, repository, C) ::= <<
<!
 Generates the interface body.
 @param table the table.
 @param repository the table repository name.
 @param C the context.
!>
/**
 * <description(tableName=table.name)>
<class_common_javadoc(
  template="org/acmsl/queryj/dao/DAOFactory.stg", C=C)>
 */
public class <engine.name.voName><table.name.capitalized>DAOFactory
    implements <table.name.capitalized>DAOFactory
{
    /**
     * Creates a {@link <engine.name.voName><table.name.capitalized>DAO}.
     * @return such {@link <table.name.voName>DAO} implementation.
     */
    <nullable(C=C)>
    @Override
    public <table.name.capitalized>DAO createDAO()
    {
        return createDAO(getDataSource(), new DAOListenerImpl());
    }

    /**
     * Creates a {@link <engine.name.voName><table.name.capitalized>DAO}.
     * @param dataSource the required {@link DataSource}.
     * @return such {@link <table.name.voName>DAO} implementation.
     */
    <nullable(C=C)>
    protected <table.name.capitalized>DAO createDAO(
        <nullable(C=C)>final DataSource dataSource,
        <nullable(C=C)>final DAOListener daoListener)
    {
        <nullable(C=C)>final <table.name.capitalized>DAO result;

        if (dataSource != null)
        {
            result = new <engine.name.voName><table.name.capitalized>DAO(dataSource, daoListener);
        }
        else
        {
            result = null;
        }

        return result;
    }

    /**
     * Retrieves the {@link DataSource data source}.
     * @return such data source.
     */
    <nullable(C=C)>
    protected DataSource getDataSource()
    {
        return getDataSource(JndiUtils.getInstance(), "<C.jndi_location>");
    }

    /**
     * Retrieves the {@link DataSource data source}.
     * @param jndiUtils the {@link JndiUtils} instance.
     * @param jndiLocation the JNDI path where the {@link DataSource} is available.
     * @return such data source.
     */
    <nullable(C=C)>
    protected DataSource getDataSource(
        <notnull(C=C)>final JndiUtils jndiUtils, <notnull(C=C)>final String jndiLocation)
    {
        <nullable(C=C)>DataSource result = null;

        try
        {
            result = jndiUtils.getDataSourceFromJndi(jndiLocation);
        }
        catch  (<notnull(C=C)>final CannotGetJdbcConnectionException cannotGetJdbcConnection)
        {
            // Assuming JNDI not available. The only way to retrieve
            // the DataSource is reduced to transactional (thread-based)
            // operations.
            try
            {
                LogFactory.getLog(OracleGClubDefinitionDAO.class).info(
                      "DataSource not present in JNDI context. "
                    + "Assuming JNDI is not enabled.");
            }
            catch  (<notnull(C=C)>final Throwable throwable)
            {
                // Class loading problem.
            }
        }
    }
}
>>