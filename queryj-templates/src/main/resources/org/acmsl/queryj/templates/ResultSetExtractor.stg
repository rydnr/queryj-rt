//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: ValueObject.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate ResultSetExtractor
//              implementations.
//
//
group ResultSetExtractor;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate ResultSetExtractor implementations.
  @param C the context.
!>
<sourceImpl(table=C.table, C=C)>
>>

sourceImpl(table, C) ::= <<
<!
  Defines the rules to generate ResultSetExtractor implementations.
  @param table the table.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(table=table)
  ],
  template="org/acmsl/queryj/templates/ResultSetExtractor.stg",
  C=C)><endif>
*/
<package_declaration(p=C.package)>
<checkers_import(C=C)>
<if(C.implement_markers)>

<endif>
/*
 * Importing JDK classes.
 */
import java.io.Serializable;
<if(table.attributeTypes)>
<table.attributeTypes:{ t | import <t>;}; separator="\n">
<endif>


<class(table=table, C=C)>
>>

description(table) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
!>
{@link ResultSetExtractor} implementation for <table.name>.
>>

class(table, repository, C) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param repository the repository.
 @param C the context.
!>
/**
 * <[
      description(table=table)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(
  template="org/acmsl/queryj/templates/ResultSetExtractor.stg", C=C)>
 */
public class <table.name.voName>ResultSetExtractor
    implements  ResultSetExtractor,
                <repository.capitalized>TableRepository
{
    <defaultExtractor(table=table, repository=repository, C=C)>

}
>>

defaultExtractor(table, repository, C) ::= <<
<!
 Generates the default logic for the extractor.
 @param table the table.
 @param repository the repository.
 @param C the context.
!>
/**
 * Extracts {@link <table.name.voName>} information from given result set.
 * @param resultSet the result set.
 * @return the {@code <table.name.voName>} or
 * {@code null} if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 */
<notnull(C=C)>
public Object extractData(<notnull(C=C)>final ResultSet resultSet)
    throws  SQLException,
            DataAccessException
{
    return
        extractData(
            resultSet, <table.name.voName>ValueObjectFactory.getInstance());
}

/**
 * Extracts {@link <table.name.voName>} information from given result set.
 * @param resultSet the result set.
 * @param factory the {@link <table.name.voName>ValueObjectFactory}
 * instance.
 * @return the {@code <table.name.voName>} or
 * {@code null} if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_notnull("resultSet")>
 <precondition_notnull("factory")>
 */
protected <table.name.voName> extractData(
    final QueryResultSet resultSet,
    final <table.name.voName>ValueObjectFactory factory)
  throws  SQLException,
          DataAccessException
{
    <table.name.voName> result = null;

    if  (resultSet.next())
    {
        <input.attributes:nullable_attribute_extraction(
          attr=it, input=input)>

        result =
            factory.create<table.name.voName>ValueObject(
                <input.attributes:attribute_extraction(attr=it);
                  separator=",\n">);
    }

    return result;
}
>>

oracleExtractor(input) ::= <<
<!
 Generates the constructor needed by Oracle LOB management.
 @param input the input.
!>
<oracle8Extractor(input=input)>
>>

oracle8Extractor(input) ::= <<
<!
 Generates the constructor needed by Oracle8 LOB management.
 @param input the input.
!>
<input.lob_attributes:attribute_class_declaration(attr=it);
  separator="\n\n">

/**
 * The \<i>select for update\</i> mode.
 */
private boolean m__bSelectForUpdateMode;

/**
 * Creates a Oracle-based \<code>ResultSetExtractor\</code>
 * to extract <table.name.voName> information, managing LOB stuff.
 * @param selectForUpdateMode whether the result set is the result of
 * the \<i>select for update\</code> (required to perform some operations
 * such as \<b>insert\</b>s), or not.
 */
protected <table.name.voName>ResultSetExtractor(
    final boolean selectForUpdateMode)
{
    immutableSetSelectForUpdateMode(selectForUpdateMode);
}

/**
 * Creates a Oracle-based \<code>ResultSetExtractor\</code>
 * to extract <table.name.voName> information, managing LOB stuff.
 <input.lob_attributes:attribute_javadoc_method_declaration(attr=it);
   separator=",\n">
 * @param selectForUpdateMode whether the result set is the result of
 * the \<i>select for update\</code> (required to perform some operations
 * such as \<b>insert\</b>s), or not.
 */
public <table.name.voName>ResultSetExtractor(
    <input.lob_attributes:attribute_method_declaration(attr=it);
      separator=",\n">,
    final boolean selectForUpdateMode)
{
    this(selectForUpdateMode);
    <input.lob_attributes:attribute_setter_call(attr=it); separator="\n">
}

/**
 * Creates a Oracle-based \<code>ResultSetExtractor\</code>
 * to extract <table.name.voName> information, managing LOB stuff.
 */
public <table.name.voName>ResultSetExtractor()
{
    this(false);
}

<input.lob_attributes:attribute_accessors(attr=it); separator="\n\n">

/**
 * Specifies whether the extractor is retrieving results of a
 * \<i>select for update\</i> or not.
 * @param selectForUpdate such behaviour.
 */
protected final void immutableSetSelectForUpdateMode(
    final boolean selectForUpdateMode)
{
    m__bSelectForUpdateMode = selectForUpdateMode;
}

/**
 * Specifies whether the extractor is retrieving results of a
 * \<i>select for update\</i> or not.
 * @param selectForUpdate such behaviour.
 */
protected void setSelectForUpdateMode(final boolean selectForUpdateMode)
{
    immutableSetSelectForUpdateMode(selectForUpdateMode);
}

/**
 * Retrieves whether the extractor is retrieving results of a
 * \<i>select for update\</i> or not.
 * @return such behaviour.
 */
public boolean getSelectForUpdateMode()
{
    return m__bSelectForUpdateMode;
}

/**
 * Extracts \<i><table.name.voName>\</i> information from given result set.
 * @param resultSet the result set.
 * @return the \<code><table.name.voName>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_instanceof(name="resultSet", className="QueryResultSet")>
 */
public Object extractData(final ResultSet resultSet)
    throws  SQLException,
            DataAccessException
{
    return
        extractData(
            resultSet,
            <input.lob_attributes:{get<it.nameCapitalized>()};
              separator=",\n">,
            getSelectForUpdateMode(),
            <table.name.voName>ValueObjectFactory.getInstance());
}

/**
 * Extracts \<i><table.name.voName>\</i> information from given result set.
 * @param resultSet the result set.
 <input.lob_attributes:attribute_javadoc_method_declaration(attr=it);
   separator="\n">
 * @param selectForUpdate whether the operation is a
 * \<i>select for update\</i>.
 * @param factory the \<code><table.name.voName>ValueObjectFactory\</code>
 * instance.
 * @return the \<code><table.name.voName>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_notnull("resultSet")>
 <precondition_notnull("factory")>
 */
protected Object extractData(
    final ResultSet resultSet,
    <input.lob_attributes:attribute_method_declaration(attr=it);
      separator=",\n">,
    final boolean selectForUpdateMode,
    final <table.name.voName>ValueObjectFactory factory)
  throws  SQLException,
          DataAccessException
{
    <table.name.voName> result = null;

    if  (resultSet.next())
    {
        <input.attributes:nullable_attribute_extraction(
          attr=it, input=input)>
        <input.lob_attributes:special_attribute_extraction(
          attr=it, input=input)>

        result =
            factory.create<table.name.voName>ValueObject(
                <input.attributes:attribute_extraction(
                  attr=it, input=input); separator=",\n">);
    }

    return result;
}

>>

attribute_class_declaration(attr) ::= <<
<!
 Generates the attribute class declaration.
 @param attr the attribute.
!>
/**
 * The <attr.name> attribute.
 */
private <attr.objectType> m__<attr.nameCapitalized>;
>>

attribute_javadoc_method_declaration(attr) ::= <<
<!
 Generates the attribute Javadoc method declaration.
 @param attr the attribute.
!>
* @param <attr.nameLowercased> the \<i><attr.name>\</i> information.
>>

attribute_method_declaration(attr) ::= <<
<!
 Generates the attribute method declaration.
 @param attr the attribute.
!>
final <attr.objectType> <attr.nameLowercased>
>>

attribute_setter_call(attr) ::= <<
<!
 Generates the attribute setter call.
 @param attr the attribute.
!>
immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);
>>

attribute_accessors(attr) ::= <<
<!
 Generates the attribute accessors.
 @param attr the attribute.
!>
/**
 * Specifies the \<i><attr.name>\</i> information.
 * @param <attr.nameLowercased> such value.
 */
protected final void immutableSet<attr.nameCapitalized>(
    final <attr.objectType> <attr.nameLowercased>)
{
    m__<attr.nameCapitalized> = <attr.nameLowercased>;
}

/**
 * Specifies the \<i><attr.name>\</i> information.
 * @param <attr.nameLowercased> such value.
 */
protected void set<attr.nameCapitalized>(
    final <attr.objectType> <attr.nameLowercased>)
{
    immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);
}

/**
 * Specifies the \<i><attr.name>\</i> information.
 * @param <attr.nameLowercased> such value.
 */
public <attr.objectType> get<attr.nameCapitalized>()
{
    return m__<attr.nameCapitalized>;
}
>>
