//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: ResultSetExtractor.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate ResultSetExtractor
//              implementations.
//
//
group ResultSetExtractor;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate ResultSetExtractor implementations.
  @param C the context.
!>
<sourceImpl(table=C.table, C=C)>
>>

sourceImpl(table, C) ::= <<
<!
  Defines the rules to generate ResultSetExtractor implementations.
  @param table the table.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(table=table)
  ],
  template="org/acmsl/queryj/templates/ResultSetExtractor.stg",
  C=C)><endif>
 */
<package_declaration(p=C.package)>

<project_imports(
  basePackageName=C.project_package,
  voSubpackageName=typeInitMap.voSubpackageName,
  table=table,
  repository=C.repository)>

/*
 * Importing V24-Commons classes.
 */
import com.ventura24.commons.dao.DAOListener;
import com.ventura24.commons.dao.V24ResultSetExtractor;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
<checkers_import(C=C)>
/*
 * Importing JDK classes.
 */
import java.io.Serializable;
import java.sql.ResultSet;
import java.sql.SQLException;
<import_attribute_types(table=table, useHeader=false)>

<class(table=table, repository=C.repository, C=C)>
>>

project_imports(basePackageName, voSubpackageName, table, repository) ::= <<
<!
  Generates the project imports.
  @param basePackageName the base package name.
  @param voSubpackageName the subpackage for the value object.
  @param table the table.
  @param repository the repository name.
!>
/*
 * Importing <repository.capitalized> classes.
 */
import <basePackageName>.<voSubpackageName>.<table.name.voName>;
import <basePackageName>.<voSubpackageName>.core.<table.name.voName>Factory;
>>

description(table) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
!>
{@link ResultSetExtractor} implementation for <table.name>.
>>

class(table, repository, C) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param repository the repository.
 @param C the context.
!>
/**
 * <[
      description(table=table)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(
  template="org/acmsl/queryj/templates/ResultSetExtractor.stg", C=C)>
 */
public class <table.name.voName>ResultSetExtractor
    extends V24ResultSetExtractor\<<table.name.voName>\>
{
    /**
     * Creates a new instance.
     * @param sql the SQL query.
     * @param listener the {@link DAOListener} instance.
     */
    public <table.name.voName>ResultSetExtractor(
        <notnull(C=C)>final String sql, <nullable(C=C)>final DAOListener listener)
    {
        super(sql, listener);
    }

    <defaultExtractor(table=table, repository=repository, C=C)>
}
>>

defaultExtractor(table, repository, C) ::= <<
<!
 Generates the default logic for the extractor.
 @param table the table.
 @param repository the repository.
 @param C the context.
!>
/**
 * Extracts {@link <table.name.voName>} information from given result set.
 * @param resultSet the result set.
 * @param sql the original SQL query.
 * @param listener the {@link DAOListener} instance.
 * @return the {@link <table.name.voName>} or
 * {@code null} if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i>.
 * @throws DataAccessException with information about any
 * custom exception.
 */
@Override
<notnull(C=C)>
protected <table.name.voName> extractData(
    <notnull(C=C)>final ResultSet resultSet,
    <notnull(C=C)>final String sql,
    <nullable(C=C)>final DAOListener listener)
    throws  SQLException,
            DataAccessException
{
    return extractData(resultSet, sql, listener, <table.name.voName>Factory.getInstance());
}

/**
 * Extracts {@link <table.name.voName>} information from given result set.
 * @param resultSet the result set.
 * @param sql the original SQL query.
 * @param listener the {@link DAOListener} instance.
 * @param factory the {@link <table.name.voName>Factory}
 * instance.
 * @return the {@code <table.name.voName>} or
 * {@code null} if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i>.
 * @throws DataAccessException with information about any
 * custom exception.
 */
<notnull(C=C)>
protected <table.name.voName> extractData(
    <notnull(C=C)>final ResultSet resultSet,
    <notnull(C=C)>final String sql,
    <nullable(C=C)>final DAOListener listener,
    <notnull(C=C)>final <table.name.voName>Factory factory)
  throws  SQLException,
          DataAccessException
{
    <nullable(C=C)>final <table.name.voName> result;

    if  (resultSet.next())
    {
        if (listener != null)
        {
            listener.resultSetMovedForward(sql, 1);
        }

        result =
            factory.create<table.name.voName>(
                <table.attributes:{a | <attribute_resultset_retrieval(attr=a, C=C)>}; separator=",\n">);

        if  (listener != null)
        {
            listener.resultSetClosed(this);
        }
    }
    else
    {
        // TODO: check if this is exceptional or not.
        throw new RuntimeException("No more data to extract!");
        //result = null;
    }

    return result;
}
>>

nullable_attribute_extraction(attr, table, repository, C) ::= <<
<attr.name>
>>

attribute_extraction(attr, table, repository, C) ::= <<
<attr.name>
>>