//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DataAccessManager.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DataAccessManager facades.
//
//
group DataAccessManager;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate DataAccessManager facades.
  @param C the context.
!>
<sourceImpl(repository=C.repository, tables=C.tables, C=C)>
>>

sourceImpl(repository, tables, C) ::= <<
<!
  Defines the rules to generate DataAccessManager facades.
  @param repository the repository name.
  @param tables the tables.
  @param C the context.
!>
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(repository=repository)
  ],
  template="org/acmsl/queryj/templates/DataAccessManager.stg",
  C=C)><endif>
<package_declaration(p=C.package)>
<checkers_import(C=C)>
<if(C.implement_markers)>

/*
 * Importing some ACM-SL Commons classes.
 */
import org.acmsl.commons.patterns.dao.DataAccessManager;

<endif>

<class(repository=repository, tables=tables, C=C)>
>>

description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository.
!>
DataAccessManager facade for <repository> repository.
>>

class(repository, tables, C) ::= <<
<!
 Generates the class body.
 @param repository the repository.
 @param tables the tables.
 @param C the context.
!>
/**
 * <[
      description(repository=repository)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(
  template="org/acmsl/queryj/templates/DataAccessManager.stg", C=C)>
 */
public class <repository.capitalized>DataAccessManager
<if(C.implement_markers)>
    extends  DataAccessManager,
             Serializable
<else>
    extends Serializable
<endif>
{
    <tables:{ t | <dao_attribute_declaration(table=t)>}; separator="\n\n">

<if(C.repository_dao)>
    <repository_dao_attribute_declaration(repository=repository)>
<endif>

    /**
     * Public constructor to allow reflective access.
     */
    public <repository.capitalized>DataAccessManager() {};

    /**
     * Singleton implementation to avoid double-checked locking.
     */
    private static final class <repository.capitalized>DataAccessManagerSingletonContainer
    {
        private static final <repository.capitalized>DataAccessManager SINGLETON =
            new <repository.capitalized>DataAccessManager();
    }

    /**
     * Retrieves a {@code <repository.capitalized>DataAccessManager} instance.
     * @return such instance.
     */
    public static <repository.capitalized>DataAccessManager getInstance()
    {
        return <repository.capitalized>DataAccessManagerSingletonContainer.SINGLETON;
    }

    <tables:{ t | <dao_methods(table=t)>}; separator="\n\n">
<if(C.repository_dao)>
    <repository_dao_methods(repository=repository)>
<endif>
}
>>

dao_attribute_declaration(table) ::= <<
<!
 Generates the attribute declaration for each DAO.
 @param table the table.
!>
/**
 * The {@link <table.name.voName>DAO} reference (cached whereas Manager
 * instance is not garbage collected).
 */
private <table.name.voName>DAO m__<table.name.voName>DAO;
>>

repository_dao_attribute_declaration(repository) ::= <<
<!
 Generates the attribute declaration for the repository DAO.
 @param repository the repository.
!>
/**
 * The \<code><repository.capitalized>DAO\</code> reference (cached whereas Manager
 * instance is not garbage collected).
 */
private <repository.capitalized>DAO m__<repository.capitalized>DAO;
>>

dao_methods(table) ::= <<
<!
 Generates the DAO-specific methods for each table.
 @param table the table.
!>
/**
 * Specifies the new {@code <table.name.voName>DAO} reference to keep.
 * @param dao the new DAO.
 */
protected void set<table.voName>DAOReference(final <table.voName>DAO dao)
{
    m__<table.voName>DAO = dao;
}

/**
 * Retrieves the existing \<code><table.voName>DAO\</code> reference.
 * @return a DAO instance for accessing <table.name> information.
 */
protected <table.voName>DAO get<table.voName>DAOReference()
{
    return m__<table.voName>DAO;
}

/**
 * Retrieves a \<code><table.voName>DAO\</code>.
 * @return a DAO instance for accessing <table.name> information.
 */
public <table.voName>DAO get<table.voName>DAO()
{
    <table.voName>DAO result = get<table.voName>DAOReference();

    if  (result == null)
    {
        <table.voName>DAOFactory t_<table.voName>DAOFactory =
            <table.voName>DAOFactory.getInstance();

        if  (t_<table.voName>DAOFactory != null)
        {
            result = t_<table.voName>DAOFactory.create<table.voName>DAO();

            set<table.voName>DAOReference(result);
        }
    }

    return result;
}
>>

repository_dao_methods(repository, repositoryCapitalized) ::= <<
<!
 Generates the methods for the repository DAO.
 @param repository the repository.
 @param repositoryCapitalized the repository, capitalized.
!>
/**
 * Specifies the new \<code><repositoryCapitalized>DAO\</code> reference to keep.
 * @param dao the new DAO.
 */
protected void set<repositoryCapitalized>DAOReference(final <repositoryCapitalized>DAO dao)
{
    m__<repositoryCapitalized>DAO = dao;
}

/**
 * Retrieves the existing \<code><repositoryCapitalized>DAO\</code> reference.
 * @return a DAO instance for accessing the <repository>-wide DAO.
 */
protected <repositoryCapitalized>DAO get<repositoryCapitalized>DAOReference()
{
    return m__<repositoryCapitalized>DAO;
}

/**
 * Retrieves a \<code><repositoryCapitalized>DAO\</code>.
 * @return a DAO instance for accessing the <repository>-wide DAO.
 */
public <repositoryCapitalized>DAO get<repositoryCapitalized>DAO()
{
    <repositoryCapitalized>DAO result = get<repositoryCapitalized>DAOReference();

    if  (result == null)
    {
        <repositoryCapitalized>DAOFactory t_<repositoryCapitalized>DAOFactory =
            <repositoryCapitalized>DAOFactory.getInstance();

        if  (t_<repositoryCapitalized>DAOFactory != null)
        {
            result = t_<repositoryCapitalized>DAOFactory.create<repositoryCapitalized>DAO();

            set<repositoryCapitalized>DAOReference(result);
        }
    }

    return result;
}
>>
