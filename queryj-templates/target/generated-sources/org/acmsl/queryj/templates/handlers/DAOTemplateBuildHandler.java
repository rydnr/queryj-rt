/*
                  QueryJ's Template Packaging

    Copyright (C) 2014-today Jose San Leandro Armendariz
                              queryj@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: jose.sanleandro@acm-sl.com
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecabanas
                    Boadilla del monte
                    28660 Madrid
                    Spain

 ******************************************************************************
 *
 * Author: QueryJ's Template Packaging
 *
 * Filename: DAOTemplateBuildHandler.java
 *
 * Description: Build handler for DAOTemplates.
 *
 * Generated by QueryJ Template Packaging's
 * org/acmsl/queryj/templates/packaging/TemplateBuildHandler.stg
 * at timestamp: 
 *
 * DO NOT MODIFY THIS CLASS MANUALLY, SINCE IT GETS GENERATED AUTOMATICALLY.
 * EITHER MODIFY org/acmsl/queryj/templates/packaging/TemplateBuildHandler.stg
 * OR CREATE AND APPLY A PATCH.
 */
package org.acmsl.queryj.templates.handlers;

/*
 * Importing QueryJ-Core classes.
 */
import org.acmsl.queryj.api.handlers.BasePerTableTemplateBuildHandler;
import org.acmsl.queryj.QueryJCommand;
import org.acmsl.queryj.QueryJCommandWrapper;
import org.acmsl.queryj.Literals;
import org.acmsl.queryj.metadata.DecoratedString;
import org.acmsl.queryj.metadata.engines.Engine;
import org.acmsl.queryj.metadata.engines.EngineDecorator;
import org.acmsl.queryj.tools.PackageUtils;

/*
 * Importing custom templates.
 */
import org.acmsl.queryj.api.PerTableTemplateContext;
import org.acmsl.queryj.templates.DAOTemplate;
import org.acmsl.queryj.templates.DAOTemplateFactory;

/*
 * Importing StringTemplate classes.
 */
import org.stringtemplate.v4.ST;

/*
 * Importing JetBrains annotations.
 */
import org.jetbrains.annotations.NotNull;

/*
 * Importing checkthread.org annotations.
 */
import org.checkthread.annotations.ThreadSafe;

/*
 * Importing JDK classes.
 */
import java.util.List;

/**
 * Build handler for {@link org.acmsl.queryj.templates.DAOTemplate}s.
 * @author <a href="http://www.acm-sl.org/projects/queryj">QueryJ's Template Packaging</a>
 * Generation template: org/acmsl/queryj/templates/packaging/TemplateBuildHandler.stg
 * Created: 
 */
@ThreadSafe
public class DAOTemplateBuildHandler
    extends BasePerTableTemplateBuildHandler<
                DAOTemplate,
                PerTableTemplateContext,
                DAOTemplateFactory>
{
    /**
     * The key to access the templates in the command.
     */
    @NotNull static final String TEMPLATES_KEY = "DAO_templates";

    /**
     * Creates a {@code DAOTemplateBuildHandler}.
     */
    public DAOTemplateBuildHandler() {}

    /**
     * Retrieves the template factory.
     * @return the {@link DAOTemplateFactory} instance.
     */
    @Override
    @NotNull
    protected DAOTemplateFactory retrieveTemplateFactory()
    {
        return DAOTemplateFactory.getInstance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @NotNull
    protected String retrievePackage(
        @NotNull final String tableName,
        @NotNull final Engine<String> engine,
        @NotNull final String projectPackage,
        @NotNull final PackageUtils packageUtils)
    {
        return buildPackageName(tableName, engine, projectPackage);
    }

    /**
     * Builds the actual package name.
     * @param tableName the table name.
     * @param engine the engine.
     * @param projectPackage the project package.
     * @return the package name.
     */
    @NotNull
    static String buildPackageName(
        @SuppressWarnings("unused") @NotNull final String tableName,
        @SuppressWarnings("unused") @NotNull final Engine<String> engine,
        @SuppressWarnings("unused") @NotNull final String projectPackage)
    {
        @NotNull final String result;

        @NotNull final ST packageTemplate = new ST("<packageName>.dao.rdb.<engine.name.lowercased>");

        packageTemplate.add(Literals.TABLE_NAME, new DecoratedString(tableName));
        packageTemplate.add(Literals.PACKAGE_NAME, new DecoratedString(projectPackage));
        packageTemplate.add(Literals.ENGINE, new EngineDecorator(engine));

        result = packageTemplate.render();

        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void storeTemplates(
        @NotNull final List<DAOTemplate> templates,
        @NotNull final QueryJCommand parameters)
    {
        new QueryJCommandWrapper<List<DAOTemplate>>(parameters)
            .setSetting(TEMPLATES_KEY, templates);
    }
}
