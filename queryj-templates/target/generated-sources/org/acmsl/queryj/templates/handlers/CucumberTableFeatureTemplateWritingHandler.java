/*
                  QueryJ's Template Packaging

    Copyright (C) 2014-today Jose San Leandro Armendariz
                              queryj@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: jose.sanleandro@acm-sl.com
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecabanas
                    Boadilla del monte
                    28660 Madrid
                    Spain

 ******************************************************************************
 *
 * Author: QueryJ's Template Packaging
 *
 * Filename: CucumberTableFeatureTemplateWritingHandler.java
 *
 * Description: Writing handler for CucumberTableFeatureTemplates.
 *
 * Generated by QueryJ Template Packaging's
 * org/acmsl/queryj/templates/packaging/TemplateWritingHandler.stg
 * at timestamp: 
 *
 * DO NOT MODIFY THIS CLASS MANUALLY, SINCE IT GETS GENERATED AUTOMATICALLY.
 * EITHER MODIFY org/acmsl/queryj/templates/packaging/TemplateWritingHandler.stg
 * OR CREATE AND APPLY A PATCH.
 */
package org.acmsl.queryj.templates.handlers;

/*
 * Importing QueryJ-Core classes.
 */
import org.acmsl.queryj.api.PerTableTemplateContext;
import org.acmsl.queryj.api.handlers.BasePerTableTemplateWritingHandler;
import org.acmsl.queryj.metadata.engines.Engine;
import org.acmsl.queryj.QueryJCommand;
import org.acmsl.queryj.QueryJCommandWrapper;
import org.acmsl.queryj.tools.PackageUtils;

/*
 * Importing custom templates.
 */
import org.acmsl.queryj.templates.CucumberTableFeatureTemplate;
import org.acmsl.queryj.templates.CucumberTableFeatureTemplateGenerator;

/*
 * Importing some JetBrains annotations.
 */
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/*
 * Importing checkthread.org annotations.
 */
import org.checkthread.annotations.ThreadSafe;

/*
 * Importing JDK classes.
 */
import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * Writing handler for {@link CucumberTableFeatureTemplate}s.
 * @author <a href="http://www.acm-sl.org/projects/queryj">QueryJ's Template Packaging</a>
 * Generation template: org/acmsl/templates/packaging/TemplateWritingHandler.stg
 * Created: 
 */
@ThreadSafe
public class CucumberTableFeatureTemplateWritingHandler
    extends BasePerTableTemplateWritingHandler<
                CucumberTableFeatureTemplate,
                PerTableTemplateContext,
                CucumberTableFeatureTemplateGenerator>
{
    /**
     * Creates a new writing handler for {@link CucumberTableFeatureTemplate templates}.
     */
    public CucumberTableFeatureTemplateWritingHandler() {}

    /**
     * {@inheritDoc}
     */
    @NotNull
    @Override
    protected CucumberTableFeatureTemplateGenerator retrieveTemplateGenerator(final boolean caching, final int threadCount)
    {
        return new CucumberTableFeatureTemplateGenerator(caching, threadCount);
    }

    /**
     * {@inheritDoc}
     */
    @NotNull
    @Override
    protected List<CucumberTableFeatureTemplate> retrieveTemplates(@NotNull final QueryJCommand parameters)
    {
        @NotNull final List<CucumberTableFeatureTemplate> result;

        @Nullable final List<CucumberTableFeatureTemplate> aux =
            new QueryJCommandWrapper<List<CucumberTableFeatureTemplate>>(parameters)
                .getSetting(CucumberTableFeatureTemplateBuildHandler.TEMPLATES_KEY);

        if (aux == null)
        {
            result = new ArrayList<CucumberTableFeatureTemplate>(0);
        }
        else
        {
            result = aux;
        }

        return result;
    }

    /**
     * {@inheritDoc}
     */
    @NotNull
    @Override
    protected File retrieveOutputDir(
        @NotNull final File projectFolder,
        @NotNull final String projectPackage,
        final boolean useSubfolders,
        @NotNull final String tableName,
        @NotNull final Engine<String> engine,
        @NotNull final QueryJCommand parameters,
        @NotNull final PackageUtils packageUtils)
    {
        @NotNull final File result;

        @NotNull final String packageName =
            CucumberTableFeatureTemplateBuildHandler.buildPackageName(
                tableName, engine, projectPackage);

        @NotNull final String[] pieces = packageName.split("\\.");

        @NotNull final StringBuilder aux = new StringBuilder();

        for (@NotNull final String piece : pieces)
        {
            aux.append(File.separator);
            aux.append(piece);
        }

        result = new File(projectFolder.getAbsolutePath() + aux.toString());

        return result;
    }
}
